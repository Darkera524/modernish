#! /bin/sh
if test -z "${_msh_using_getlongopts}"; then

# Add support for GNU-style --option and --option=argument long options to
# the 'getopts' shell builtin.
#
# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html#
#
# This is based on the idea that a long option "--option" with an argument
# "argument", taking the form "--option=argument", can be defined in terms of
# a short option "--" with an argument "option=argument". So we just need to
# add "-:" at the end of the optstring, and split the argument at the "=".
# Surprisingly, this works in every POSIX shell I've tested and even in the
# original Bourne shell (as provided by Heirloom).
#
# Usage: getopts [ --long='optionname optwitharg: anotheropt' ] shortopts varname "$@"
#
# Extra requirement: getopts must be called with the positional parameters as
# the third and further argument. Simply add "$@" (including the double
# quotes) to replicate the default behaviour. This is because we can't access
# global positional parameters from within shell functions. Yet, the OPTIND
# variable is shared with the calling shell, so in every other aspect, the
# built-in 'getopts' should work as expected even when called from a
# function.
# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html#tag_20_54_16

getopts() {
	local _msh_Opt _msh_OptString _msh_LongOpt _msh_LongOpts _msh_OptVarName
	case "$1" in
	( --long=* )	_msh_LongOpts=${1#*=}
			shift ;;
	esac

	_msh_OptString=$1
	_msh_OptVarName=$2
	shift 2
	command getopts "$_msh_OptString-:" "$_msh_OptVarName" "$@" || return

	eval "_msh_Opt=\$$_msh_OptVarName"
	test "$_msh_Opt" = '-' || return 0

	# split long option from its argument and add leading dash
	_msh_Opt=-${OPTARG%%=*}
	test "$_msh_Opt" = "-$OPTARG" && OPTARG='' || OPTARG=${OPTARG#*=}

	# check it against the provided list of long options
	for _msh_LongOpt in $_msh_LongOpts; do
		test "$_msh_Opt" = "-${_msh_LongOpt%:}" || continue

		# if the option requires an argument, test that it has one,
		# replicating the short options behaviour of 'getopts'
		case "$_msh_LongOpt" in
		( *: )	test -n "$OPTARG" || case "$_msh_OptString" in
			( :* )	eval "$_msh_OptVarName=':'"
				OPTARG="-$_msh_LongOpt"
				return 0 ;;
			( * )	eval "$_msh_OptVarName='?'"
				echo "$ME: option requires argument: -$_msh_Opt" 1>&2
				return 0 ;;
			esac
		esac
		
		eval "$_msh_OptVarName=\$_msh_Opt"
		return 0
	done
	
	# long option not found
	eval "$_msh_OptVarName='?'"
	case "$_msh_OptString" in
	( :* )	OPTARG=$_msh_Opt ;;		
	( * )	unset OPTARG
		echo "$ME: unrecognized option: -$_msh_Opt" 1>&2 ;;
	esac
}
	

_msh_using_getlongopts=y
fi
