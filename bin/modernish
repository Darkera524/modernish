#! /bin/sh
# -*- mode: sh; -*-

# modernish - an attempt at a cross-platform POSIX shell modernizer library.
# Inspired by modernizr (feature testing) and jQuery (extending the language),
#
# POSIX reference: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html
# 
# --- begin license ---
# Copyright (c) 2015 Martijn Dekker <martijn@inlv.org>, Groningen, Netherlands
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# --- end license ---
# 
# modernish system constants (read-only variables):
#	$MSH_VERSION		version of modernish
#	$MSH_CAP		space-separated ID list of shell capabilities and bugs
#	$ME			replacement for $0 (for hashbang path #!/usr/bin/env modernish)
#	$UID			the invoking user's UID
#	$USER			the invoking user's username
#	$CC?			control characters $CCn, etc. (same as printf \n, etc.)
#	$CC??			control characters $CC01 .. $CC1F
#	$CONTROLCHARS		all control characters
#	$WHITESPACE		all whitespace characters
#	$ASCIIALNUM		all alphanumeric characters in ASCII
#	$SHELLSAFECHARS		portable characters that don't need to be shell-quoted
# modernish internal global variables and functions namespace:
#	_Msh_*

# TODO:
# - trawl for ideas and functionality:
#	http://www.etalabs.net/sh_tricks.html
#	https://github.com/stephane-chazelas/misc-scripts
#	https://github.com/spencertipping/bash-lambda
# - figure out a reliable way to determine the full path of the shell
#   that is executing modernish
#	> Linux: readlink /proc/$$/exe
#	> ... other systems?
# - for systems that succeed in the above, keep cache of test battery
#   results ($MSH_CAP) in /tmp/_Msh_cache_$UID/MSH_CAP, discarding it
#   if the cache is older than the shell
# - thisshellhas() :
#	> cache results
#		. for bash, populate cache with 'compgen -k -b'
#		. for zsh, populate cache with 'enable -r; enable'
#		. ...

# -------------

# Request standards compliance.

# ... zsh:
case ${ZSH_VERSION+z} in
( z )
	emulate sh -o POSIX_ARGZERO 2>|/dev/null || emulate sh
	set -o MULTIBYTE
	# zsh has the unique ability to disable reserved words, so disable
	# certain zsh-specific reserved words on non-interactive shells so
	# that modernish scripts can use the names.
	# Keep 'coproc', 'export', 'function', 'select', 'time' and 'typeset'
	# as reserved words, because they cannot be overridden on bash and/or
	# ksh, so disabling them would not serve a compatibility purpose.
	case $- in
	( *i* ) ;;
	( * ) disable -r declare end float foreach integer local nocorrect repeat 2>|/dev/null ;;
	esac ;;
esac

# ... pdksh and derivatives (oksh, mksh, lksh, ... ?)
case "${KSH_VERSION:-}" in
( '@(#)'* )
	set -o posix
	# mksh/lksh have UTF-8 support as of R38, but it needs to be turned on
	# explicitly with 'set -U'; the locale is not detected for scripts.
	case $KSH_VERSION in
	( '@(#)MIRBSD KSH '* | '@(#)LEGACY KSH '* )
		case ${LC_ALL:-${LC_CTYPE:-${LANG:-}}} in
		( *[Uu][Tt][Ff]8* | *[Uu][Tt][Ff]-8* )
			set -U ;;
		( * )	set +U ;;
		esac ;;
	esac ;;
esac

# ... yash: it's very POSIX compliant even without posix mode, but unlike in
# other shells, posix mode disables non-standard functionality that scripts
# might want to test for and use (e.g. local variables).
# Yash in posix mode is also the only shell that honours the POSIX requirement
# that regular built-in utililities must have an existing external equivalent
# in order to be executed. This means that, in posix mode, yash will search
# $PATH before each execution of any regular built-in, which severely impacts
# performance.
# For these two reasons, perhaps it's better to leave posix mode off for yash.
# However, for compatibility testing purposes, it's very useful to turn it on,
# because it's the strictest POSIX compliance check available.
#case ${YASH_VERSION+s} in ( s ) set -o posix ;; esac

# ... external commands:
export POSIXLY_CORRECT=y	# this also sets -o posix on bash

# --- end of standards compliance requests ---

# -------------

# Initialization, phase 1.

# As we're setting stuff to read-only, guard against initializing twice.
# (zsh exits the shell upon trying to unset a read-only; therefore, don't
# suppress an error message from 'unset' with 2>|/dev/null, because it's the
# only thing zsh users will get to see.)
unset -v MSH_VERSION
case ${MSH_VERSION+s} in
( s )
	case ${1:-} in
	( --version )
		printf '%s\n' "$MSH_VERSION"
		return 0
		;;
	( * )
		printf '%s\n' 'Modernish is already initialized. To reload it, exit this shell first.' 1>&2
		return 1
		;;
	esac ;;
esac

# Modernish does _not_ support -e (-o errexit); for many commands, we need
# to be able to distinguish between "false" (1) and "error" (2 or greater)
# exit status, but 'set -e' falsely considers any non-zero exit status to be
# an error. What exit status indicates error depends on the particular
# command. Modernish provides the 'harden' function to catch errors reliably
# on a command-by-command basis.
# TODO: Reconsider this. Something like 'false && :' still works.
set +e

# Turn off 'allexport'. We're setting many read-only variables. Exporting
# all of them by default is not a good idea (even though they won't be
# read-only when inherited that way). Restore the option when we're done
# with initializing modernish. (The stack functions 'push' and 'pop'
# temporarily turn it off during execution because exporting the stack could
# cause bad things to happen.)
case $- in
( *a* )	set +a; _Msh_allexport=y ;;
( * )	unset -v _Msh_allexport ;;
esac

# MSH_CAP (capabilities; also quirks and bugs) is space-separated. Each ID
# in $MSH_CAP should only contain ASCII capital letters A-Z and (for bugs or
# quirks) the underscore. Maximum length per ID is 13 characters.
MSH_CAP=''

# Save $PATH for tests that need to change it.
_Msh_PATH=$PATH

# --- Shell feature, quirk, bug and POSIX compliance requirement checks ---
# Block on fatal shell bugs and standards incompatibilities that would break
# modernish. Identify quirks and nonstandard features. As a side effect,
# also do some of the initialization.
#
# Each feature, quirk and bug gets an identifier in MSH_CAP so scripts can
# test on them and work around them if necessary using the 'thisshellhas'
# function. Fatal bugs are blocked on unless $HOME/.modernish-force exists.
# (But they are considered fatal for a reason. Proceed at your own risk.)
#
# NOTE: all tests need to be compatible with all the bugs tested for (even
# the fatal ones), so that modernish can give a full report.

# Save IFS to restore it at the end of the tests.
[ -n "${IFS+s}" ] && _Msh_IFS=$IFS || unset -v _Msh_IFS
case ${IFS+s} in
( s )	_Msh_IFS=$IFS ;;
( * )	unset -v _Msh_IFS ;;
esac

# Helper variable and function.
_Msh_ftlcount=0
_Msh_fatal() {
	printf '[%s]\t%s\n' "$1" "$2" 1>&2		# Formats well if $1 is max 13 chars
	MSH_CAP=${MSH_CAP:+$MSH_CAP }$1
	_Msh_ftlcount=$(( ${_Msh_ftlcount} + 1 ))	# FTL_NOARITH compatible addition
}

# The version of modernish.
# FTL_ROASSIGN: unpatched pdksh
readonly MSH_VERSION=0.03dev 2>| /dev/null
test "${MSH_VERSION:-}" = 0.03dev || _Msh_fatal FTL_ROASSIGN "'readonly' command doesn't support assignment."

# Remove all aliases from the execution environment, as some shells set
# unhelpful default aliases. (Particularly, AT&T ksh sets
#	alias command="command "
# which defeats the ability of 'command' to bypass aliases, which would break
# feature testing using the "thisshellhas" function). In user profiles, any
# wanted aliases can be set after sourcing modernish; the modernish functions
# will already have been parsed so new aliases won't have an effect on them.
\unalias -a 2>| /dev/null \
|| case ${ZSH_VERSION+s} in
( s )	\unalias -m '*' ;;
( * )	false ;;
esac || _Msh_fatal FTL_UNALIASA "No support for 'unalias -a'."

# FTL_NOALIAS: Debian posh.
alias test=test && unalias test || _Msh_fatal FTL_NOALIAS 'No support for aliases at all.'

# Make sure that we have a way to guarantee running a shell builtin.
# FTL_NOCOMMAND: Debian posh; zsh < 4.2
{
	unset -f command
	command -v test \
	&& command -V test \
	&& command test 42 -eq 42
} >| /dev/null 2>&1 || _Msh_fatal FTL_NOCOMMAND "No or broken 'command' builtin."

# On some shells (e.g. mksh), the POSIX 'type' command is an alias. We just
# killed it, so restore it, to avoid it being either missing or run as an
# external command (where the results w.r.t. what is a builtin don't apply
# to the currrent shell).
# In all the shells I've tested except bash (which has 'type -t'), the
# 'type' output is exactly equivalent to 'command -V' (capital V). However,
# POSIX standardises 'command -V' in more detail than it does 'type', while
# every possible output of 'command -V' also matches the less-detailed
# definition of 'type'.
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/type.html
case " $MSH_CAP " in
( *' FTL_NOALIAS '* ) ;;	# skip: not applicable
( * )	PATH=/dev/null
	command -V type >| /dev/null 2>&1 || alias type='command -V'
	PATH=${_Msh_PATH} ;;
esac

# FTL_DEVCLOBBR: Can't write to devices if 'set -o noclobber' is active.
# Workaround: use >| instead of >
# (NetBSD /bin/sh)
( set -C; : >/dev/null ) 2>|/dev/null || _Msh_fatal FTL_DEVCLOBBR "Can't redirect to devices if 'set -o noclobber'."

# Test for complete POSIX shell arithmetics support. Run test in a subshell
# because shells exit on 'syntax error', thwarting our error message.
# FTL_NOARITH: NetBSD /bin/sh, Slackware /bin/ash.
(	i=7
	j=0
	test "$(( ((j+=6*i)==42)>0 ? 12 : 13 ))" -eq 12 && test "$j" -eq 42
) 2>| /dev/null || _Msh_fatal FTL_NOARITH "Incomplete and/or broken POSIX shell arithmetics."

# pdksh 5.2.14nb5 from NetBSD pkgsrc has a very obscure bug: it fails to
# match a list of characters from a variable in a bracket pattern, but only
# if the variable name is exactly 14 characters long! (It breaks
# shellquote() because $SHELLSAFECHARS, which it uses in a bracket
# pattern, is a 14 character variable name.)
_Msh_test_1234=x	# 14 character variable name
case x in
( [${_Msh_test_1234}] ) ;;
( * )	_Msh_fatal FTL_FOURTEEN "Problem with 14 characters long variable names." ;;
esac
unset -v _Msh_test_1234

# Incorrect exit status of test -n with single parenthesis values in
# zsh 5.0.6 and 5.0.7. This can make scripts that process arbitrary
# data (e.g. the shellquote function) take the wrong action, so is a
# fatal bug. Also, spurious error message with both test -n and test -z.
test -n '(' 2>| /dev/null \
|| _Msh_fatal FTL_TESTPAREN "test -n/-z can't test strings '(' or ')'.${ZSH_VERSION+ (zsh 5.0.8 fixes this)}"

# When IFS is empty on most versions of pdksh (i.e. field splitting is off),
# "$@" is counted as a single argument instead of each positional parameter as
# separate arguments. This is unlike every other shell and contrary to the
# standard as the working of "$@" is unrelated to field splitting. Sadly this
# means neither of NetBSD's or OpenBSD's default shells can run modernish.
IFS=''
_Msh_testFn() {
	_Msh_testFn2 "$@"
}
_Msh_testFn2() {
	case $# in
	( 1 )	# pdksh, oksh, posh, mksh before R44
		_Msh_fatal FTL_PARONEARG '"$@" becomes one single argument if field splitting is disabled.' ;;
	( 4 )	;;
	( * )	_Msh_fatal FTL_PARNEWBUG 'Undiscovered bug with "$@"! Please report.' "($#)" ;;
	esac
}
_Msh_testFn one two 'th ree' 'fo
ur'

# FTL_SUBSTIFS: parameter substitution changes all existing spaces in the
# variable to the first character in IFS. (zsh 4.1.1)
_Msh_test='1 2 3'
IFS='x '  # this zsh bug is only triggered if IFS has space as 2nd char
_Msh_test=${_Msh_test+$_Msh_test }4
case ${_Msh_test} in
( '1 2 3 4' )	;;
( '1x2x3 4' )	_Msh_fatal FTL_SUBSTIFS "Parameter substitution changes spaces to IFS char." ;;
( '*' )		_Msh_fatal FTL_PSTNEWBUG "Undiscovered bug with parameter substitution! (${_Msh_test})" ;;
esac
IFS=' '

# FTL_PSUB: parameter substitution fails to match certain
# patterns. (yash < 2.40)
#  *  The parameter expansion ${foo##bar*} was being treated like
#     ${foo##bar} where the asterisk should match up to the end of the
#     parameter value.
#  *  The parameter expansion ${foo%%*} was being expanded to ${foo}
#     where it should expand to an empty string.
_Msh_test='barbarfoo'
case ${_Msh_test##bar*}/${_Msh_test%%*} in
( / )	;;
( barfoo/barbarfoo )
	_Msh_fatal FTL_PSUB "Parameter substitution fails to match certain patterns.${YASH_VERSION+ (yash 2.40 fixes this)}" ;;
( * )	_Msh_fatal FTL_PSUBNEW "Undiscovered bug with parameter substitution! (${_Msh_test})" ;;
esac

# FTL_EVALRET: shell doesn't return from a function if the "return"
# is within an 'eval', but only from the 'eval'. (yash < 2.39)
# http://osdn.jp/ticket/browse.php?group_id=3863&tid=35232
# (In modernish 0.02dev this was a non-fatal BUG_EVALRET and the code
# included workarounds, but yash up to 2.39 turns out to have FTL_PSUB,
# so we can stop working around bugs from that version and before.)
_Msh_testFn() { true; eval "return $?"; false; }
if ! _Msh_testFn; then
	_Msh_fatal FTL_EVALRET "No return from function if 'return' within 'eval'.${YASH_VERSION+ (yash 2.39 fixes this)}"
fi

# FTL_ROUNDMLN: AT&T ksh version "M 1993-12-28 s+" (pre-installed version
# on Mac OS X 10.7) has rounding errors in integer arithmetic when ordinary
# shell assignments or comparisons are used on numbers greater than one
# million; only pure shell arithmetic expressions work (up to 64 bits).
case " $MSH_CAP " in
( *" FTL_NOARITH "* ) ;;  # Skip: not applicable.
( * )	PATH=/dev/null
	typeset -i _Msh_test2 2>|/dev/null  # suppress ksh93 rendering variable as float exponential
	PATH=${_Msh_PATH}
	_Msh_test2=$((1000005))
	: "$((_Msh_test = 1000005))"
	case "${_Msh_test2},$((1000001)),$((1000005)),${_Msh_test}" in
	( 1000005,1000001,1000005,1000005 ) ;;
	( 1000010,1e+06,1*00001e+06,1000005 )
		_Msh_fatal FTL_ROUNDMLN 'Broken shell assignment/comparison: rounding errors after 1 million' ;;
	( * )	_Msh_fatal FTL_ROUNDNEW "Undiscovered bug in shell arith! (${_Msh_test2},$((1000001)),$((1000005)),${_Msh_test})" ;;
	esac
	unset -v _Msh_test2  # undo typeset -i
	;;
esac

# --- Non-fatal bug tests ---

# BUG_UPP (Unset Positional Parameters): Cannot access "$@" or "$*" if set -u
# (-o nounset) is active and there are no positional parameters. If that
# option is set, NetBSD /bin/sh and older versions of ksh93 and pdksh error
# out on accessing "$@" and "$*" (the collective positional parameters), even
# if that access is implicit in a 'for' loop (as in 'for var do stuff; done').
# This is against the standard:
#     "-u: When the shell tries to expand an unset parameter OTHER THAN THE
#     '@' AND '*' SPECIAL PARAMETERS, it shall write a message to standard
#     error and shall not execute the command containing the expansion [...]".
# Unfortunately, ksh93 with this bug is still too common to block on this.
# Reference:
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_25_03
# (under '-u').
# This is a bug making 'use safe' less convenient to work with. Workarounds
# are necessary in library code (search for BUG_UPP to find them).
# The following workarounds are the most convenient:
#	* Instead of "$@", use: ${1+"$@"}
#	* Instead of "$*", use: ${1+"$*"}
#	* Instead of 'for var do', use: 'for var in ${1+"$@"}; do'
# However, BUG_PARONEARG in bash makes these impossible when under 'use safe'!
# Universally compatible workarounds include:
#	* Testing 'if thisshellhas BUG_UPP' before using the above workarounds;
#	  no existing shell has both BUG_UPP and BUG_PARONEARG.
#	* Testing that $# is greater than 0 before accessing "$@" or "$*".
#	* Using "${@:-}" instead of "$@" and coping with an extra empty argument
#	  if there are no positional parameters (note: "${@-}" without the ':'
#	  does not work on all shells).
# The 'safe' module will refuse to initialize by default if BUG_UPP is found.
# To 'use safe' on a shell with this bug, say:
#     use safe -w BUG_UPP
# to get around the block, and implement workarounds in your script as above.
if ! ( set -u; set --; dummy="$@"; dummy="$*"; for dummy do :; done; ) 2>| /dev/null
then
	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_UPP
fi

# BUG_FNSUBSH: Function definitions within subshells (including command
# substitutions) are ignored if a function by the same name exists in
# the main shell, so the wrong function is executed. (Unsetting of functions
# is also ignored, as is setting/unsetting of aliases.)
# ksh93 (all current versions as of 2015) has this bug.
_Msh_testFn() { echo main; }
case $( _Msh_testFn() { echo sub; }; _Msh_testFn ) in
( sub )  ;;
( main ) MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_FNSUBSH ;;
( * )    _Msh_fatal FTL_FNSUBSH 'Undiscovered bug with functions in subshells!' ;;
esac

# BUG_MULTIBYTE: We're running on a locale with a variable-length character
# set (i.e. UTF-8) but the shell does not support multi-byte characters. For
# instance, ${#var} measures length in bytes, not characters. With
# fixed-length one-byte character sets, the bug is irrelevant so we don't
# set the identifier. Current shells with this bug include dash and most
# branches of pdksh.
# Note: Currently, BUG_MULTIBYTE is only detected if we're in a UTF-8 locale.
# It should not be detected for single-byte locales as it's irrelevant there.
# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02
# TODO? Make test reliable. Figure out what all the variable-length
#	character sets are and implement tests for all of them.
#	(Or maybe not; UTF-8 is de facto standard, so why bother?)
case ${LC_ALL:-${LC_CTYPE:-${LANG:-}}} in
( *.[Uu][Tt][Ff]8 | *.[Uu][Tt][Ff]-8 )
	_Msh_test='bèta' # 4 char, 5 byte UTF-8 string 'beta' with accent grave on 'e'
	case ${#_Msh_test} in
	( 4 )	;;
	( 5 )	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_MULTIBYTE ;;
	( * )	_Msh_fatal FTL_UTFLENGTH "Fatal error in measuring UTF-8 string length. (${#_Msh_test})" ;;
	esac ;;
esac

# BUG_NOUNSETRO: Cannot freeze variables as readonly in an unset state.
# This bug in zsh < 5.0.8 makes the 'readonly' command set them to the
# empty string instead. For BUG_NOUNSETRO compatibility, modernish library
# code should not depend on the unset status of read-only variables.
# Notes on test compatibility with other shell bugs:
# * For BUG_UNSETFAIL compatibility, don't use 'unset ... && readonly ...'
# * ksh93 version "M 1993-12-28 r" has a parsing bug: it will erroneously
#   stop script execution on
#	test "${_Msh_ReadOnlyTest+set}" = ""
#   with a "_Msh_ReadOnlyTest: read-only variable" error, indicating the
#   wrong line number. But this ONLY happens if that command is in a
#   subshell! Yet it stops the main script! So to avoid locking out ksh93,
#   don't use a subshell (this speeds up our init anyway) and accept that we
#   have a permanent _Msh_ReadOnlyTest unset readonly.
unset -v _Msh_ReadOnlyTest
readonly _Msh_ReadOnlyTest
test "${_Msh_ReadOnlyTest+set}" = "" || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_NOUNSETRO

# BUG_EMPTYBRE is a 'case' pattern matching bug in zsh: empty bracket
# expressions eat subsequent shell grammar, producing unexpected results (in
# the test example below, a false positive match, because the two patterns
# are taken as one, with the "|" being taken as part of the bracket
# expression rather than shell grammar separating two bracket expressions).
# This is particularly bad if you want to pass a bracket expression using a
# variable or parameter, and that variable or parameter could be empty. This
# means the grammar parsing depends on the contents of the variable!
# This is fixed as of zsh 5.0.8, but *only* in POSIX/'emulate sh' mode.
# (yash < 2.15 also had this bug.)
_Msh_test=''
case abc in
( ["${_Msh_test}"] | [!a-z]* )
	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_EMPTYBRE
esac

# BUG_HASHVAR: On zsh, $#var means the length of $var - other shells and
# POSIX require braces, as in ${#var}. This causes interesting bugs when
# combining $#, being the number of positional parameters, with other
# strings. For example, in arithmetics: $(($#-1)), instead of the number of
# positional parameters minus one, is interpreted as ${#-} concatenated with
# '1'. So, for zsh compatibility, always use ${#} instead of $# unless it's
# stand-alone or followed by a space.
# zsh 5.0.8 fixes this bug, but *only* in POSIX/'emulate sh' mode.
_Msh_test=$$	# another bug on zsh 4.3.11 is that ${#$} is a bad
		# substitution, even though $#${var} resolves to ${#$}{var};
		# we're assigning $$ to the variable as a workaround
case $#${_Msh_test},$(($#-1+1)) in
( "${#}${$},${#}" ) ;;
( "${#_Msh_test}{_Msh_test},${#-}2" ) MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_HASHVAR ;;
( * ) _Msh_fatal FTL_HASHVAR "Undiscovered bug with parameter expansion involving \$# ($#${_Msh_test},$(($#-1+1)))" ;;
esac

# BUG_READWHSP: 'read' does not trim leading IFS whitespace. (yash < 2.39)
# http://osdn.jp/ticket/browse.php?group_id=3863&tid=35265
# BUG_READTWHSP: 'read' does not trim trailing IFS whitesace if there is
# more than one field. (dash) https://bugs.debian.org/794965
# FTL_READAWHSP: 'read' does not trim any IFS whitespace. (yash < 2.8)
# (in here-document below: two leading spaces and two trailing spaces!)
IFS=' ' read _Msh_test <<EOF 
  ab  cd  
EOF
case ${_Msh_test} in
( '  ab  cd')	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_READWHSP ;;
('ab  cd  ')	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_READTWHSP ;;
('  ab  cd  ')	_Msh_fatal FTL_READAWHSP "'read' does not trim any IFS whitespace." ;;
('ab  cd')	;;
( * )		_Msh_fatal FTL_READWHSP "Undiscovered IFS whitespace bug with 'read'. ('${_Msh_test}')" ;;
esac

# BUG_APPENDC: On zsh, when set -C (noclobber) is active, "appending" to a
# nonexistent file with '>>' throws an error rather than creating the file.
# This is long-standing zsh behaviour, but is contrary to the POSIX spec and
# different from every other shell, so it's a legit POSIX compliance bug.
# The error may cause the shell to exit, so must fork a subshell to test it.
# This is another bug affecting 'use safe'.
# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_07_03
#	http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_25
if ! test -d /tmp || ! test -w /tmp; then
	_Msh_fatal FTL_NOTMP "/tmp directory not found or not writable!"
elif !	(
		set -C
		# Find a nonexistent filename
		i=$$
		until F=/tmp/_Msh_BUG_APPENDC.$i; test ! -e "$F"; do
			i=$(( $i + $$ ))
		done
		# Test if "appending" creates it
		: >> "$F" && { rm -f "$F" & }
	) 2>| /dev/null
then
	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_APPENDC
fi

# BUG_UNSETFAIL: the 'unset' command sets a non-zero (fail) exit status if
# the variable to unset was either not set (some pdksh versions), or never
# set before (AT&T ksh 1993-12-28). This is contrary to POSIX, which says:
# "Unsetting a variable or function that was not previously set shall not be
# considered an error [...]". Reference:
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_29_03
# Good thing we don't support "set -e". Still, this bug can affect the exit
# status of functions and dot scripts if 'unset' is the last command.
unset -v _Msh_test
if ! unset -v _Msh_test; then
	MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_UNSETFAIL
fi

# BUG_CMDVRESV: 'command -v' does not find reserved words such as "if", contrary
# to POSIX. This bug affects modernish' thisshellhas function. The bug is in
# mksh R50f (2015/04/19) and earlier, as well as its ancestor pdksh and its variants.
# Fixed in mksh R51 (2015/07/05).
# Ref: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html#tag_20_22
PATH=/dev/null
command -v if >| /dev/null 2>&1 || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_CMDVRESV
PATH=${_Msh_PATH}

# QRK_IFSFINAL: in field splitting, a final non-whitespace IFS delimiter
# character is counted as an empty field (yash, zsh, pdksh)
# The POSIX standard is pretty ambiguous on this:
# https://osdn.jp/ticket/browse.php?group_id=3863&tid=35283#comment:3863:35283:1435293070
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05
# http://www.mail-archive.com/bug-bash@gnu.org/msg05283.html
# It's a QRK (quirk), not a BUG, because it's not clear that the uncommon
# field splitting behaviour is a POSIX compliance bug, but it's certainly in
# the minority among shells.
#
# Also test for fatal fieldsplitting bugs in other shells. The ones
# involving backslashes would break shellquote() in particular. To make sure
# shellquote() works correctly, also include single quotes in the test.
IFS=': '
_Msh_test='  ::  \on\e :\tw'\''o \th\'\''re\e :\\'\''fo\u\r:   : :  '
_Msh_testFn() {
	case ${#},${1-U},${2-U},${3-U},${4-U},${5-U},${6-U},${7-U},${8-U},${9-U},${10-U},${11-U},${12-U}, in
	( '8,,,\on\e,\tw'\''o,\th\'\''re\e,\\'\''fo\u\r,,,U,U,U,U,' )
		# no quirks or bugs (bash, ash, dash, ksh93, mksh, ...)
		;;
	( '9,,,\on\e,\tw'\''o,\th\'\''re\e,\\'\''fo\u\r,,,,U,U,U,' )
		# zsh, yash
		MSH_CAP=${MSH_CAP:+$MSH_CAP }QRK_IFSFINAL
		;;
	( '11,,,\on\e,,\tw'\''o,\th\'\''re\e,,\\'\''fo\u\r,,,,U,' )
		# pdksh
		MSH_CAP=${MSH_CAP:+$MSH_CAP }QRK_IFSFINAL
		_Msh_fatal FTL_IFSWHSP "Field splitting: incorrect IFS whitespace removal."
		;;
	( '9,,,on\e,tw'\''o,th\'\''re\e,\'\''fo\u\r,,,,U,U,U,' )
		# yash 2.8 to 2.37
		MSH_CAP=${MSH_CAP:+$MSH_CAP }QRK_IFSFINAL
		_Msh_fatal FTL_IFSBKSL "Field splitting eats initial backslashes.${YASH_VERSION+ (yash 2.38 fixes this)}"
		;;
	( '9,,,\on\e,\tw'\''o,\th\'\''re\e,\'\''fo\u\r,,,,U,U,U,' )
		# zsh up to 4.2.6
		MSH_CAP=${MSH_CAP:+$MSH_CAP }QRK_IFSFINAL
		_Msh_fatal FTL_IFSEFODB "Field splitting eats first of double backslash.${ZSH_VERSION+ (zsh 4.2.7 fixes this)}" 
		;;
	( * )	_Msh_fatal FTL_IFSNWBUG "Undiscovered quirk or bug with field splitting! Please report. ($_Msh_test)"
		;;
	esac
}
_Msh_testFn ${_Msh_test}
case $MSH_CAP in
( *:* )	MSH_CAP=$(IFS=':'; echo $MSH_CAP)	# on shells with FTL_SUBSTIFS, fix the :s
esac
IFS=' '

# BUG_TESTILNUM: On dash (up to 0.5.8), giving an illegal number to 'test -t'
# or '[ -t' causes some kind of corruption so the next 'test'/'[' invocation
# fails with an "unexpected operator" error even if it's legit. This affects
# checking the exit status of the previous 'test' with 'test'. After the
# corrupted invocation, 'test' will function normally again. So isonterminal()
# needs a workaround with 'case' and a dummy invocation of 'test' (see there).
{
	test -t 12323454234578326584376438	# "illegal number"
	test $? -gt 1				# trigger bug
} 2>| /dev/null
case $? in
( 0 | 1 ) ;;
( * ) MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_TESTILNUM ;;
esac

# BUG_TESTRMPAR: zsh: in binary operators with 'test'/'[', if the first
# argument starts with '(' and the last with ')', both the first and the
# last argument are completely removed, leaving only the operator, and the
# result of the operation is incorrectly true because the operator is
# incorrectly parsed as a non-empty string. This applies to any operator.
# Ref.: http://www.zsh.org/mla/workers/2015/msg03275.html
# TODO: should this be a fatal bug?
test '(a' = ')b' && MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_TESTRMPAR

# BUG_TESTERR0: mksh: 'test'/[' exits successfully (exit status 0) if
# an invalid argument is given to an operator. (mksh R52 fixes this)
test 123 -eq 1XX 2>| /dev/null && MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_TESTERR0

# BUG_CMDSPCIAL: zsh; mksh < R50e: 'command' does not turn off the 'special
# built-in' characteristics of special built-ins, such as exit shell on error.
# Ref.:	http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html#tag_20_22
#	"If the command_name is the same as the name of one of the special
#	built-in utilities, the special properties in the enumerated list at
#	the beginning of Special Built-In Utilities shall not occur."
# Hopefully -@ is an invalid option on every shell...
( command set -@; : ) 2>| /dev/null || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_CMDSPCIAL

# TODO: are these relevant, or are they even bugs?
# Bugs with parameter substitution of a string starting with a backslash.
_Msh_test=somevalue
# BUG_PSUBBS1 (AT&T ksh, Debian-patched dash, FreeBSD /bin/sh)
test ${_Msh_test+"\}"} = '\}' || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_PSUBBS1			# "
# BUG_PSUBBS2 (bash 2 & 3, standard dash, Busybox ash)
test "${_Msh_test+\}}" = '}' || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_PSUBBS2

# BUG_PARONEARG: When IFS is empty on bash 3.x and 4.x (i.e. field splitting
# is off), ${1+"$@"} (the BUG_UPP workaround for "$@") is counted as a
# single argument instead of each positional parameter as separate
# arguments. This is unlike every other shell and contrary to the standard
# as the working of "$@" is unrelated to field splitting.
# This bug renders the most convenient workaround for BUG_UPP ineffective on
# bash under 'use safe' settings which include 'set -o nounset' and empty
# IFS. :( Not that any version of bash has BUG_UPP, but cross-platform
# compatibility is hindered by this.
IFS=''
_Msh_testFn() {
	_Msh_testFn2 ${1+"$@"}
}
_Msh_testFn2() {
	case $# in
	( 1 )	# bash 3.x and 4.x
		MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_PARONEARG ;;
	( 4 )	;;
	( * )	_Msh_fatal FTL_PARNEWBUG 'Undiscovered bug with "$@"! Please report.' "($#)" ;;
	esac
}
_Msh_testFn one two 'th ree' 'fo
ur'
IFS=' '

# BUG_ARITHTYPE: In zsh, arithmetic assignments (using 'let', '$(( ))',
# etc.) on unset variables assign a numerical/arithmetic type to a variable,
# causing subsequent normal variable assignments to be interpreted as
# arithmetic expressions and fail if they are not valid as such. This is an
# incompatibility with the POSIX shell, which is a typeless language.
# To work around this bug, either make sure variables are not used for a
# non-integer data type after arith assignment, or set them to an empty
# value before using them.
case " $MSH_CAP " in
( *" FTL_NOARITH "* )	;;	# skip: not applicable
( * )	(	unset -v _Msh_test
		: $((_Msh_test = 1))
		_Msh_test=a:b:c  # zsh: bad math expression: ':' without '?'
	) 2>|/dev/null || MSH_CAP=${MSH_CAP:+$MSH_CAP }BUG_ARITHTYPE ;;
esac

# --- Tests for optional, non-standard, but common features. ---

# LEPIPEMAIN (execute Last Element of pipe in main shell)
# Most shells, when using a pipe construct such as:
#	command1 | command2 | command3
# execute each element of the pipe in its own subshell. This means any
# changes in variables done in 'command1', 'command2' and 'command3' are
# lost. But shells with LEPIPEMAIN, while still launching a subshell for
# 'command1' and 'command2', execute the last element of the pipe
# in the main shell. This means you can do something like:
#	somecommand | read VAR
# and have $VAR take effect in the main shell.
# Shells known to have LEPIPEMAIN are: zsh and AT&T ksh (not pdksh or mksh).
# Also, bash 4.2 and up with 'shopt -s lastpipe', but only if job control is
# disabled (set +m), which is usually the case for scripts only.
case ${BASH_VERSION+s} in
( s )	# For bash, LEPIPEMAIN is not added to $MSH_CAP because it can be
	# turned on and off while a program is running, so thisshellhas()
	# tests for it as a special case. Let's turn it on by default.
	shopt -s lastpipe 2>/dev/null ;;
( * )	_Msh_test=''
	echo hi | read _Msh_test
	case ${_Msh_test} in
	( hi )	MSH_CAP=${MSH_CAP:+$MSH_CAP }LEPIPEMAIN ;;
	esac ;;
esac

# Seed the $RANDOM pseudorandom number generator if we have it, otherwise
# reserve the variable name to prevent incompatible use. Test against the
# seed four times to make the chance of a false negative infinitesimal.
RANDOM=$$
if [ "$RANDOM" -eq "$$" ] && [ "$RANDOM" -eq "$$" ] && [ "$RANDOM" -eq "$$" ] && [ "$RANDOM" -eq "$$" ]
then
	unset -v RANDOM
	readonly RANDOM
else
	MSH_CAP=${MSH_CAP:+$MSH_CAP }RANDOM
fi

# Test if we have $LINENO (current shell script line number).
# If not, reserve the name.
# (Actually, make it read-only in any case - the only shell that has a problem
# with that (segfaults, even) is pdksh/oksh, and we already can't support it
# because of FTL_PARONEARG; its superior derivative, mksh, is fine.)
_Msh_test=${LINENO-}
: # need no-op for mksh to update LINENO before 'case'. [TODO? report bug?]
case ${_Msh_test} in
( "${LINENO-}" ) unset -v LINENO ;;
( * ) MSH_CAP=${MSH_CAP:+$MSH_CAP }LINENO ;;
esac
readonly LINENO

# LOCAL: Function-local variables using the 'local' or 'typeset' special
# builtin or shell keyword.
if _Msh_testFn() { local _Msh_test || return; _Msh_test=7; } \
&& _Msh_test=42 && _Msh_testFn && [ "${_Msh_test}" -eq 42 ]; then
	MSH_CAP=${MSH_CAP:+$MSH_CAP }LOCAL
elif _Msh_testFn() { typeset _Msh_test || return; _Msh_test=7; } \
&& _Msh_test=42 && _Msh_testFn && [ "${_Msh_test}" -eq 42 ]; then
	# alias it on pdksh/mksh -- and yash, if not in posix mode
	alias local=typeset
	MSH_CAP=${MSH_CAP:+$MSH_CAP }LOCAL
fi >| /dev/null 2>&1

# ARITHPP: shell arith supports the ++ and -- unary operators.
# (Subshell needed because shells that don't support it exit.)
(	i=0
	: $((i++)) $((++i)) $((i--)) $((--i))
) 2>| /dev/null && MSH_CAP=${MSH_CAP:+$MSH_CAP }ARITHPP

# ARITHCMD: standalone arithmetic evaluation using a command like
# ((expression)). The expression is evaluated using arithmetic as in
# standard $((expression)). If the value of the expression is non‐zero, the
# return status is 0; otherwise the return status is 1. This is exactly
# equivalent to 'let "expression"', but generally much faster.
# Supported by bash, zsh, AT&T ksh, and all pdksh variants.
_Msh_test=56
PATH=/dev/null
{ ((_Msh_test+=67)); } 2>| /dev/null
PATH=${_Msh_PATH}
[ "${_Msh_test}" -eq 123 ] && MSH_CAP=${MSH_CAP:+$MSH_CAP }ARITHCMD

# FLOAT: Floating point arithmetic. (ksh93, zsh)
case " $MSH_CAP " in
( *" FTL_NOARITH "* )	;;	# skip: not applicable
( * )	(	LC_ALL=C	# ksh93 uses locale-dependent syntax!
		eq() { return "$((($1)!=($2)))"; }
		eq 1.25+1.75 3 ) 2>/dev/null \
	&& MSH_CAP=${MSH_CAP:+$MSH_CAP }FLOAT
	;;
esac

# CESCQUOT: Quoting with C-style escapes, like $'\n' for newline.
case $'a\40b' in
( 'a b' ) MSH_CAP=${MSH_CAP:+$MSH_CAP }CESCQUOT ;;
esac

# ADDASSIGN: Add a string to a variable using additive assignment VAR+=string
_Msh_test=a
PATH=/dev/null
{ _Msh_test+=b; } 2>| /dev/null
PATH=${_Msh_PATH}
[ "${_Msh_test}" = ab ] && MSH_CAP=${MSH_CAP:+$MSH_CAP }ADDASSIGN

# --- End of tests ---
if [ "${_Msh_ftlcount}" -gt 0 ]; then
	if [ "${_Msh_ftlcount}" -eq 1 ]; then
		printf '1 fatal bug found. '
	else
		printf '%d fatal bugs found. ' "${_Msh_ftlcount}"
	fi
	if test -e "$HOME/.modernish-force"; then
		printf 'Proceeding anyway. THINGS WILL BREAK.\n'
	else
		printf "Sorry, this shell can't run modernish.\n"
		printf 'FYI, the full list of bugs, quirks and capabilities found is:\n%s\n' "$MSH_CAP"
		exit 127
	fi
fi 1>&2
[ -n "${_Msh_IFS+s}" ] && IFS=${_Msh_IFS} && unset -v _Msh_IFS || unset -v IFS
unset -f _Msh_testFn _Msh_testFn2 _Msh_fatal
unset -v _Msh_test _Msh_ftlcount
readonly MSH_CAP

# Bash has the read-only variable $UID, as well as $USER which is not
# read-only. Give them to other shells too, and make both of them read-only.
[ -n "${UID+s}" ] || UID=$(id -u) || exit 127
[ -n "${USER+s}" ] || USER=$(id -un) || exit 127
readonly UID USER

# --- Control character constants ---

# POSIX does not have a good way to refer to control characters in variable
# assignments or as parameters to arbitrary commands. Let's make this
# convenient using readonly variables (constants) in the CC[01][0-9A-F] and
# CC[a-z] namespaces (CC = control character).
#
# We cannot have $CC00 because shell variables can't contain the 0 character.
case " $MSH_CAP " in
( *" CESCQUOT "* )
# If this shell has CESCQUOT, it's fast and easy (and redundant).
            CC01=$'\1'  CC02=$'\2'  CC03=$'\3'  CC04=$'\4'  CC05=$'\5'  CC06=$'\6'  CC07=$'\7'
CC08=$'\10' CC09=$'\11' CC0A=$'\12' CC0B=$'\13' CC0C=$'\14' CC0D=$'\15' CC0E=$'\16' CC0F=$'\17'
CC10=$'\20' CC11=$'\21' CC12=$'\22' CC13=$'\23' CC14=$'\24' CC15=$'\25' CC16=$'\26' CC17=$'\27'
CC18=$'\30' CC19=$'\31' CC1A=$'\32' CC1B=$'\33' CC1C=$'\34' CC1D=$'\35' CC1E=$'\36' CC1F=$'\37'
;;
( * )
# Shells without CESCQUOT are the reason we're doing this. We have to use
# trickery.
# CC0A (newline) needs to be initialized separately because it cannot be
# read using 'read' (it's always a separator). MAKE SURE THE FOLLOWING IS A
# LITERAL NEWLINE AND NOTHING ELSE.
CC0A='
'
# The initialization method below is optimized for speed; the
# straightforward way to do it would be --
#	CC01=$(printf '\1')
#	CC02=$(printf '\2')
#	...
#	CC1F=$(printf '\37')
# but launching a subshell 30 times would noticeably slow down initialization.
# The method below reads from a here-document filled using one subshell.
IFS=',' read CC01 CC02 CC03 CC04 CC05 CC06 CC07 \
	CC08 CC09      CC0B CC0C CC0D CC0E CC0F \
	CC10 CC11 CC12 CC13 CC14 CC15 CC16 CC17 \
	CC18 CC19 CC1A CC1B CC1C CC1D CC1E CC1F <<endofCC || exit 127
$(printf '\1,\2,\3,\4,\5,\6,\7,\10,\11,\13,\14,\15,\16,\17,\20,\21,\22,\23,\24,\25,\26,\27,\30,\31,\32,\33,\34,\35,\36,\37')
endofCC
;;
esac

# Make them constants.
readonly     CC01 CC02 CC03 CC04 CC05 CC06 CC07 \
	CC08 CC09 CC0A CC0B CC0C CC0D CC0E CC0F \
	CC10 CC11 CC12 CC13 CC14 CC15 CC16 CC17 \
	CC18 CC19 CC1A CC1B CC1C CC1D CC1E CC1F

# For convenience, provide some synonyms corresponding with 'printf' codes:
# e = escape; a = bell (alarm); b = backspace; f = form-feed; n = new-line;
# r = carriage return; t = tab; v = vertical tab
readonly "CCe=$CC1B" "CCa=$CC07" "CCb=$CC08" "CCf=$CC0C" "CCn=$CC0A" "CCr=$CC0D" "CCt=$CC09" "CCv=$CC0B"

# And these are handy to use in a glob pattern to check against control characters in a string:
#	if match "$var" "*[$CONTROLCHARS]*"; then
#		print "\$var contains at least one control character"
#	fi
# ...or for field splitting:
#	IFS="$WHITESPACE,/"  # split fields at any whitespace, comma or slash, with space a primary separator
readonly "CONTROLCHARS=$CC01$CC02$CC03$CC04$CC05$CC06$CC07$CC08$CC09$CC0A$CC0B$CC0C$CC0D$CC0E$CC0F$CC10$CC11$CC12$CC13$CC14$CC15$CC16$CC17$CC18$CC19$CC1A$CC1B$CC1C$CC1D$CC1E$CC1F"
readonly "WHITESPACE= $CCt$CCn$CCv$CCf$CCr"		# starts with a space
readonly "ASCIIALNUM=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
readonly "SHELLSAFECHARS=${ASCIIALNUM}.,/:%+=_-"	# safelist for shell-quoting

# -------------

# Internal functions. Subject to change without notice.

_Msh_dieArgs() {
	die "$1: incorrect number of arguments (was $2, must be $3)"
}

# -------------

# more readable synonym for '!'
alias not='! '			

# test preceding command's success with 'if so;' or 'if not so;'
case " $MSH_CAP " in
( *' ARITHCMD '* )
	alias so='(($?==0))' ;;
( * )
	alias so='[ "$?" -eq 0 ]' ;;
esac

# Terminate the program on error, even from subshells.
# For interactive shells, merely return. Hence the need for "|| return".
# Usage: die [ <message> ] || return
# TODO/BUG:	An unsolved problem is that, if a modernish program is
#		launched by another shell program, the process group (-$$)
#		sometimes (but not always; it depends on the shell) includes
#		the launching program, so not just the current program is
#		killed but the launching program as well!
die() {
	case $# in
	( 0 )	;;
	( * )	echo "${ME##*/}:" "$@" 1>&2 ;;
	esac
	case $- in
	( *i* )	# on an interactive shell, attempt to interrupt command execution:
		{	# an invalid redirection works on AT&T ksh, if it comes first
			: >>/tmp/_Msh_die_${RANDOM:-$$}/nonexistent/
			# invalid arith works on most shells (not AT&T ksh, mksh, yash)
			: $((\\))
		} 2>/dev/null
		# otherwise just return (mksh, yash)
		return 143 ;;
	( * )	# on a non-interactive shell, kill the program
		# (busybox ash doesn't understand '--' in kill: prints error msg, but ignores it)
		kill -s TERM -- "-$$" 2>/dev/null	# send SIGTERM to main process and its children
		#kill -s TERM "$$"
		printf '%s\n' 'die: Warning: SIGTERM was ignored, resorting to SIGKILL' 1>&2
		kill -s KILL -- "-$$" 2>/dev/null
		#kill -s KILL "$$"
		# we should never get here, but just in case...
		command exit 143 ;;
	esac
}

# Extended 'exit'. Usage: exit [ -u ] [ <status> [ <message> ] ]
# (Be sure to still respect/restore IFS, etc. as exit traps may be executed after this!)
alias exit=_Msh_doExit
_Msh_doExit() {
	_Msh_exit_status=$?
	case ${1-} in
	( -u )	_Msh_exit_usage=y; shift ;;
	( * )	unset -v _Msh_exit_usage ;;
	esac
	if [ "$#" -ge 1 ]; then
		if ! { case $1 in ( *[!0123456789]* ) false ;; esac && [ "${#1}" -le 3 ] && [ "$1" -le 255 ]; }
		then
			die "exit: bad exit status: $1" || \command exit
		else
			_Msh_exit_status=$1
		fi
		shift
	fi
	if [ "$#" -gt 0 ]; then
		echo "${ME##*/}: $@"
	fi
	if [ -n "${_Msh_exit_usage+s}" ]; then
		showusage
	fi
	\command exit "${_Msh_exit_status}"
}

# Default showusage(). Feel free to override with another one.
showusage() {
	printf 'Type %s --help for help.\n' "${ME##*/}" 1>&2
}

# Use a modernish module.
# If the module is already loaded, does nothing and exits successfully (status 0),
# preventing dependency loops.
# Global internal variable namespace: _Msh_using_*
# TODO? use -r: unload a module (it would need to provide an unuse function)
# TODO? use -f: force-reload a module
use() {
	ge "$#" 1 || _Msh_dieArgs use "$#" 'at least 1' || return

	# since we're using the module name as part of a variable name, we
	# must validate the input to avoid a code injection vulnerability
	case $1 in
	( '' | *[!${ASCIIALNUM}/]* )
		die "use: invalid module name: $1" || return ;;
	esac

	_Msh_use_M=$1
	shift

	# replace slashes by underscores for variable name
	_Msh_use_V=_Msh_using_${_Msh_use_M}
	while contains "${_Msh_use_V}" /; do
		_Msh_use_V=${_Msh_use_V%%/*}_${_Msh_use_V#*/}
	done

	# return gracefully if the module was already loaded
	isset "${_Msh_use_V}" && return

	[ -r "$_Msh_ModulesDir/$_Msh_use_M.mm" ] || die "use: module ${_Msh_use_M} not found" || return

	case $# in
	( 0 )	_Msh_doUse ;;	# BUG_UPP workaround, BUG_PARONEARG compatible
	( * )	_Msh_doUse "$@" ;;
	esac || die "use: initialization of module '${_Msh_use_M}' failed" || return

	eval "${_Msh_use_V}=y"
	readonly "${_Msh_use_V}"  # TODO/BUG; in zsh, readonly always has function-local scope
	unset -v _Msh_use_M _Msh_use_V
}
# At least one shell (FreeBSD /bin/sh) prioritises 'return' from a function
# over 'return' from a dot script. This would cause use() to be aborted if
# the dot script uses 'return', preventing proper handling of module
# initalization errors. To work around this, wrap the dot call in a function
# of its own.
# (Unfortunately, POSIX ambiguously specifies that "the 'return' utility
# shall cause the shell to stop executing the current function or dot
# script" without saying whether the deepest item in the call hierarchy
# should take priority or not.)
_Msh_doUse() {
	. "$_Msh_ModulesDir/$_Msh_use_M.mm"
}

# -------------

# Test if all of the given words are shell keywords, regular or special
# built in commands, or (for words that are in all caps) optional
# capabilities or bugs that modernish found in the current shell.
#
# Usage: thisshellhas <word> [ <word> ... ]
#
# POSIX does not allow for a reliable way to find out what is a shell
# keyword or built in command, but it's essential for feature testing, so
# we have to make do with various shell-specific versions.
PATH=/dev/null
if [ -n "${BASH_VERSION+s}" ] && type -t 'while' 'set' 'test'
then
	# Version for bash. It's the only shell with a completely straightforward way to
	# find a shell keyword or builtin: the 'type -t' command gives consistent,
	# parseable output.
	#
	# The LEPIPEMAIN capability (as of bash 4.2) needs to be tested for as a special
	# case, because bash only has this capability if 'shopt -s lastpipe' is active
	# *and* 'set -m' (job control) is *not* active, and either of those options may
	# be set or unset during the course of a program.
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				case $(type -t -- "$1") in
				( keyword | builtin )
					;;
				( * )	return 1 ;;
				esac
				;;
			( LEPIPEMAIN )
				case $- in
				( *m* )	return 1 ;;
				( * )	command shopt -p lastpipe >/dev/null 2>&1 || return 1 ;;
				esac
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
elif [ -n "${ZSH_VERSION+s}" ] && enable -r
then
	# Version for zsh. 'enable' prints all builtins, 'enable -r' all reserved words.
	# They are separated by newlines ($CCn). This too is parseable in a consistent
	# way, though it's more complicated than bash.
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				case $CCn$(set -o POSIX_BUILTINS; command enable -r; command enable)$CCn in
				( *"$CCn$1$CCn"* )
					;;
				( * )	return 1 ;;
				esac 2>/dev/null
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
elif case " $MSH_CAP " in
     ( *' BUG_FNSUBSH '* ) ;;
     ( * ) false ;;
     esac \
&& whence -a 'whence'
then
	# Version for ksh93.
	# BUG_FNSUBSH in ksh93 causes not just the setting but also the unsetting of functions and aliases
	# within subshells to be silently ignored for functions or aliases that are inherited from the main
	# shell. That makes it impossible to use 'unset -f' and 'unalias' as part of a technique for finding
	# a shell builtin. As far as I know, we're left with no option but to parse the output of ksh93's
	# proprietary 'whence -a' command. Let's hope ksh93 won't implement internationalization before
	# fixing BUG_FNSUBSH. (Setting LC_ALL=C does not change the language of shell messages on the fly.)
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				# 'whence -a' causes all possible interpretations of the
				# given name to be reported, one per line; if one of them
				# indicates a builtin or keyword, we have a positive.
				case $CCn$( PATH=/dev/null; command whence -a -- "$1" )$CCn in
				( *"$CCn$1 is a "*"word$CCn"* | *"$CCn$1 is a"*" builtin$CCn"* )
					;;
				( * )	return 1 ;;
				esac 2>/dev/null
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
elif case " $MSH_CAP " in
     ( *' BUG_CMDVRESV '* ) ;;
     ( * ) false ;;
     esac \
&& whence 'if'
then
	# Version for pdksh/mksh. It has BUG_CMDVRESV so "command -v" command does not
	# find reserved words such as "if" (or "select"), contrary to POSIX.
	# Ref: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html#tag_20_22
	# So we use its variant of the 'whence' builtin, which does find
	# them. Thankfully it does not have BUG_FNSUBSH so we can otherwise
	# use the same technique as the others.
	# mksh fixes this bug (so won't use this version) as of R51 2015/07/10.
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				(	unalias -- "$1"
					unset -f -- "$1"
					PATH=/dev/null
					whence -- "$1"
				) >/dev/null 2>&1 || return 1
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
elif (set +o posix); then
	# At least one shell (yash) disables a regular built in (such as printf) if the
	# external equivalent is not in $PATH. In that case, this function won't find it.
	# However, this behaviour is active in strict POSIX mode only. So disable
	# the POSIX shell option for the lookup.
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				(	set +o posix
					unalias -- "$1"
					unset -f -- "$1"
					PATH=/dev/null
					command -v -- "$1" >/dev/null
				) >/dev/null 2>&1 || return 1
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
else
	# As far as I know, this version works on all other shells.
	thisshellhas() {
		[ "$#" -ge 1 ] || _Msh_dieArgs thisshellhas "$#" 'at least 1' || return
		while [ "$#" -gt 0 ]; do
			case $1 in
			( *[!ABCDEFGHIJKLMNOPQRSTUVWXYZ_]* )
				(	unalias -- "$1"
					unset -f -- "$1"
					PATH=/dev/null
					command -v -- "$1" >/dev/null
				) >/dev/null 2>&1 || return 1
				;;
			( * )	case " $MSH_CAP " in
				( *" $1 "* )	;;
				( * )		return 1 ;;
				esac
				;;
			esac
			shift
		done
	}
fi >/dev/null 2>&1
PATH=${_Msh_PATH}

## Test a POSIX shell keyword, POSIX special built-in, and POSIX regular built-in.
if ! thisshellhas 'while' 'set' 'test'; then
	printf "Failed to determine a working thisshellhas() function. " 1>&2
	if test -e "$HOME/.modernish-force"; then
		printf "Proceeding anyway. Feature testing won't work right.\n" 1>&2
	else
		printf "Can't run modernish.\n" 1>&2
		exit 127
	fi
fi

# -------------

# Test if argument is valid portable variable (or shell function) name.
# Deals with empty removal.
isvarname() {
	case ${#},${1-} in
	( [!01],* | ?[!,]* )
		_Msh_dieArgs isvarname "$#" '0 or 1' ;;
	( [01,] | 1,[0123456789]* | 1,*[!${ASCIIALNUM}_]* )
		return 1 ;;
	esac
}

# Check if a variable is set, a.k.a. declared
# (which is different from it being empty).
# Usage: isset <varname>
_Msh_test=1
unset -v _Msh_test2
if [ -v _Msh_test ] && ! [ -v _Msh_test2 ]; then
	# Version for 'test -v' in bash 4.2+ and AT&T ksh 2012-08-01.
	# Avoiding 'eval' increases performance.
	isset() {
		case ${#},${1-} in
		( 1, | 1,[0123456789]* | 1,*[!${ASCIIALNUM}_]* )
			die "isset: invalid variable name: $1" || return ;;
		( 1,* )	[ -v "$1" ] ;;
		( * )	_Msh_dieArgs isset "$#" 1 || return ;;
		esac
	}
else
	isset() {
		case ${#},${1-} in
		( 1, | 1,[0123456789]* | 1,*[!${ASCIIALNUM}_]* )
			die "isset: invalid variable name: $1" || return ;;
		( 1,* )	eval "[ -n \"\${$1+s}\" ]" ;;
		( * )	_Msh_dieArgs isset "$#" 1 || return ;;
		esac
	}
fi 2>/dev/null
unset -v _Msh_test

# unexport: the opposite of export.
# Clear the 'export' bit of a variable, conserving its value, or assign
# variables without the export bit even if 'set -a' (allexport) is active.
# This allows an "export all variables, except these" way of working. Unlike
# 'export', 'unexport' does not (and cannot) work for read-only variables.
# Usage: like 'export'. (However, unlike 'export' in some shells, there
# is no protection against field splitting or pathname expansion! But
# with 'export' you can't rely on that anyway if you work cross-platform.
# So appropriate shell-quoting is necessary if you pass an assignment.)
unexport() {
	case ${#}${-} in	# BUG_HASHVAR workaround: '${#}'
	( 0* )	_Msh_dieArgs unexport "$#" 'at least 1' || return ;;
	( *a* )	_Msh_nE_a=y; set +a ;;
	( * )	_Msh_nE_a='' ;;
	esac
	for _Msh_nE_V do
		isvarname "${_Msh_nE_V%%=*}" || break
		case ${_Msh_nE_V} in
		( *=* )	unset -v "${_Msh_nE_V%%=*}"
			_Msh_nE_val=${_Msh_nE_V#*=}
			eval "${_Msh_nE_V%%=*}=\${_Msh_nE_val}"
			;;
		( * )	if eval "[ -n \"\${${_Msh_nE_V}+s}\" ]"; then
				eval "_Msh_nE_val=\${${_Msh_nE_V}}"
				unset -v "${_Msh_nE_V}"
				eval "${_Msh_nE_V}=\${_Msh_nE_val}"
			fi
			;;
		esac
		_Msh_nE_V=''
	done
	case ${_Msh_nE_a} in
	( y )	set -a ;;
	esac
	case ${_Msh_nE_V} in
	( ?* )	die "unexport: invalid variable name: ${_Msh_nE_V%%=*}" || return ;;
	esac
	unset -v _Msh_nE_V _Msh_nE_val _Msh_nE_a
}

# -------------

# Shell-quote the values of one or more variables to prepare them for
# safe use with "eval" or other parsing by the shell. If a value only
# contains shell-safe characters, it leaves it unquoted. Empty values
# are quoted.
#
# Usage: shellquote [ <options> ] <varname> ... [ [ <options> ] <varname> ... ]
#
# Options take effect for all variable names following them. Each option
# must be a separate argument.
# -f	Force quoting, even if value only contains shell-safe characters.
#	This is useful for e.g. producing string literals for glob patterns
#	or regular expressions.
# +f	Don't quote if value only contains shell-safe characters. (Default)
# -n N	(N>=1): Multiple quoting levels: quote N times. (Default: 1)
#
# Returns success (0) if all variables were processed successfully, and
# non-success (1) if any undefined (unset) variables were encountered. Unset
# variables are left alone. It continues even after encountering an unset
# variable.
#
# Inspired by "Rich's sh (POSIX shell) tricks":
# http://www.etalabs.net/sh_tricks.html
# under "Shell-quoting arbitrary strings":
# quote () { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }
# Rich uses a command substitution with "sed" for this, launching two
# processes for each value to quote. The "shellquote" function does the same
# thing, but in-place. As it doesn't launch any subshells or external
# processes, it's more than 10 times faster (on bash, only 5-ish times).
#
# TODO?
# - option for reading stdin, producing quoted output?
# - option for quoting values rather than variables?
# - option for output to stdout instead of setting variable?
#
# TODO:
# - use printf %q in bash, zsh and AT&T ksh
# - BUG: if variable is readonly, shell exits/aborts, so IFS/globbing is not
#        restored on interactive shell. But testing readonly needs a
#        subshell: performance hit. What to do?
shellquote() {
	case $# in ( 0 ) _Msh_dieArgs quote "$#" 'at least 1' || return ;; esac

	# save and set internal field separator
	case ${IFS+s} in
	( s )	_Msh_qV_IFS=$IFS ;;
	( * )	unset -v _Msh_qV_IFS ;;
	esac
	IFS="'"

	# save globbing state; turn off globbing
	case $- in
	( *f* )	_Msh_qV_glob='' ;;
	( * )	set -f; _Msh_qV_glob='set +f;' ;;
	esac

	_Msh_qV_ERR=0
	_Msh_qV_f=''
	_Msh_qV_n=1
	_Msh_qV_N=''
	for _Msh_qV_N do
		case ${_Msh_qV_n} in
		( '' )	_Msh_qV_N=-n${_Msh_qV_N}; _Msh_qV_ERR=0 ;;
		esac
		case ${_Msh_qV_N} in
		( -f )	_Msh_qV_f=y; continue ;;
		( +f )	_Msh_qV_f=''; continue ;;
		( -n )	_Msh_qV_n=''; _Msh_qV_ERR=2; continue ;;
		( -n* )	_Msh_qV_n=${_Msh_qV_N#-n}
			if ! isint "${_Msh_qV_n}" || lt _Msh_qV_n 1; then
				_Msh_qV_ERR=3
				break
			fi
			continue ;;
		( '' | [0123456789]* | *[!${ASCIIALNUM}_]* )
			_Msh_qV_ERR=2
			break ;;
		esac
		
		if eval "[ -z \"\${${_Msh_qV_N}+s}\" ]"
		then
			_Msh_qV_ERR=1
			continue
		fi

		eval "_Msh_qV_VAL=\${${_Msh_qV_N}}"

		_Msh_qV_i=${_Msh_qV_n}
		while [ "$((_Msh_qV_i-=1))" -ge 0 ]
		do

#		if [ "${#_Msh_qV_VAL}" -gt 16384 ]
#		then
#			# The number and size grows exponentially with quoting levels; doing parameter substitution on
#			# big variables with 1000s of quotes can lock up the shell, so fall back to 'sed' if excessive.
#			# However, this quoting algorithm is more primitive, so the growth exponent is higher.
#			_Msh_qV_VAL=$(printf '%s\n' "${_Msh_qV_VAL}" | sed "s/'/'\\\\''/g; 1 s/^/'/; \$ s/\$/'/")
#			continue
#		fi

		case ${_Msh_qV_VAL} in

		# Quote empties.
		( '' )
			_Msh_qV_VAL=\'\'
			;;

		# If it's not safe for unescaped double-quoting, unescaped single-quoting or
		# not quoting, then use a mixture of single-quoting and backslash-escaping to
		# mitigate exponential growth with multiple levels of quoting.
		# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_02
		( *\'* )
			case ${_Msh_qV_VAL} in
			( *[\"\$\`\\]* )
				# Split the value of the specified variable at its single quote characters (if
				# any), storing the parts into the positional parameters. Add a protector character
				# 'X' at the end so a final literal single quote is counted.
				set -- ${_Msh_qV_VAL}X

				# First part: backslash-escape any existing initial quotes; add the initial quote.
				_Msh_qV_VAL=''
				while [ "$#" -gt 0 ] && [ -z "${1}" ]; do
					_Msh_qV_VAL="${_Msh_qV_VAL}\\'"
					shift
				done
				_Msh_qV_VAL="${_Msh_qV_VAL}'${1}"
				shift

				# Second to last parts: escape existing single quotes.
				while [ "$#" -gt 0 ]; do
					# Add closing quote.
					_Msh_qV_VAL="${_Msh_qV_VAL}'"
					# Backslash-escape any existing intermediary quotes.
					while [ "$#" -gt 0 ] && [ -z "${1}" ]; do
						_Msh_qV_VAL="${_Msh_qV_VAL}\\'"
						shift
					done
					# Add the escaped single quote plus an opening quote before the next part.
					_Msh_qV_VAL="${_Msh_qV_VAL}\\''${1}"
					shift
				done

				# Remove the protector character. Either prevent a final pair
				# of empty single quotes, or add the final single quote.
				case ${_Msh_qV_VAL} in
				( *\'X )	_Msh_qV_VAL="${_Msh_qV_VAL%\'X}" ;;
				( *X )		_Msh_qV_VAL="${_Msh_qV_VAL%X}'" ;;
				( * )		_Msh_qV_ERR=99; break ;;
				esac
				;;
			( * )
				# Safe for unescaped double quoting.
				_Msh_qV_VAL=\"${_Msh_qV_VAL}\"
				;;
			esac
			;;

		# Not safe for double quoting, but does not contain a single quote:
		# do simple single quoting without escaping anything.
		( *[\"\$\`\\]* )
			_Msh_qV_VAL=\'${_Msh_qV_VAL}\'
			;;

		# If it's safe to double-quote without escaping anything, do so. (A mixed quoting
		# strategy slightly mitigates exponential growth with multiple quoting levels.)
		# Ref.: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_03
		( *[!"${SHELLSAFECHARS}"]* )
			_Msh_qV_VAL=\"${_Msh_qV_VAL}\"
			;;

		# Shell-safe chars only: only quote if -f was given.
		( * )
			if [ -n "${_Msh_qV_f}" ]; then
				_Msh_qV_VAL=\'${_Msh_qV_VAL}\'
			else
				_Msh_qV_i=0	# avoid pointless iterations if -n > 1
			fi
			;;

		esac
		done

		# Replace the value of the specified variable with its quoted value.
		eval "${_Msh_qV_N}=\${_Msh_qV_VAL}"
	done

	case ${_Msh_qV_IFS+s} in
	( s )	IFS=${_Msh_qV_IFS}
		unset -v _Msh_qV_IFS ;;
	( * )	unset -v IFS ;;
	esac
	eval "${_Msh_qV_glob}"
	case ${_Msh_qV_N} in
	( '' | [-+]f | -n?* ) _Msh_qV_ERR=4 ;;
	esac
	unset -v _Msh_qV_VAL _Msh_qV_glob _Msh_qV_f _Msh_qV_n _Msh_qV_i
	case ${_Msh_qV_ERR} in
	( 2 )	die "shellquote: invalid option or variable name: ${_Msh_qV_N}" ;;
	( 3 )	die "shellquote: -n: integer >= 1 expected, got '${_Msh_qV_N#-n}'" ;;
	( 4 )	die "shellquote: expected variable(s) to quote" ;;
	( 99 )	die "shellquote: internal error" ;;
	esac
	eval "unset -v _Msh_qV_N _Msh_qV_ERR; return ${_Msh_qV_ERR}"
}

# Shell-quote all the positional parameters in-place.
# Usage: shellquoteparams (no arguments)
# To unquote them again, do:  eval set -- "$@"
alias shellquoteparams='{ gt "$#" 0 && eval "set -- $(for p do'\
' shellquote -n2 p && echo -n "$p "'\
' || die "shellquoteparams: shellquote failed" || break; done)"; }'

# Shell-quote and store (a subrange of) the current positional parameters
# into a variable. To restore them later, it is safe to do:
#	eval "set -- $varname"
# (with double quotes and non-escaped $).
# Usage: storeparams [ -f <firstparam> ] [ -t <lastparam> ] <varname>
#	 (f = from, t = to)
# NOTE: the modernish implementation of 'source' calls _Msh_doStoreParams.
if thisshellhas BUG_UPP; then
	alias storeparams='_Msh_doStoreParams "$#" ${1+"$@"}'
else
	alias storeparams='_Msh_doStoreParams "$#" "$@"'
fi
_Msh_doStoreParams() {
	_Msh_sP_f=1
	_Msh_sP_t=$1
	_Msh_sP_i=$(( $1 + 2 ))
	while [ "$#" -ge "${_Msh_sP_i}" ] \
	&& eval "[ \"X\${${_Msh_sP_i}#-}\" != \"X\${${_Msh_sP_i}}\" ] && _Msh_sP_o=\${${_Msh_sP_i}#-}"
	do
		case ${_Msh_sP_o} in
		( - )	_Msh_sP_i=$((_Msh_sP_i+1))
			break ;;
		( f )	_Msh_sP_i=$((_Msh_sP_i+1))
			[ "$#" -ge "${_Msh_sP_i}" ] || die "storeparams: -f: option requires an argument" || return
			eval "_Msh_sP_f=\${${_Msh_sP_i}}" ;;
		( f* )	_Msh_sP_f=${_Msh_sP_o#f} ;;
		( t )	_Msh_sP_i=$((_Msh_sP_i+1))
			[ "$#" -ge "${_Msh_sP_i}" ] || die "storeparams: -t: option requires an argument" || return
			eval "_Msh_sP_t=\${${_Msh_sP_i}}" ;;
		( t* )	_Msh_sP_t=${_Msh_sP_o#t} ;;
		esac
		_Msh_sP_i=$((_Msh_sP_i+1))
	done
	[ "$#" -ge "${_Msh_sP_i}" ] || die "storeparams: variable name expected" || return
	eval "_Msh_sP_V=\${${_Msh_sP_i}}"
	isvarname "${_Msh_sP_V}" || die "storeparams: invalid variable name: ${_Msh_sP_V}" || return
	isint "${_Msh_sP_f}" && [ "${_Msh_sP_f}" -ge 1 ] || die "storeparams: -f: invalid value: '${_Msh_sP_f}'" || return
	isint "${_Msh_sP_t}" || die "storeparams: -t: invalid value: '${_Msh_sP_t}'" || return
	[ "${_Msh_sP_t}" -gt "$#" ] && _Msh_sP_t=$#
	_Msh_sP_PPs=''
	shift "${_Msh_sP_f}"
	_Msh_sP_i=${_Msh_sP_f}
	while [ "${_Msh_sP_i}" -le "${_Msh_sP_t}" ]; do
		_Msh_sP_P=$1
		shellquote _Msh_sP_P || die "storeparams: 'shellquote' failed" || return
		_Msh_sP_PPs=${_Msh_sP_PPs:+${_Msh_sP_PPs} }${_Msh_sP_P}
		_Msh_sP_i=$((_Msh_sP_i+1))
		shift
	done
	eval "${_Msh_sP_V}=\${_Msh_sP_PPs}"
	unset -v _Msh_sP_f _Msh_sP_t _Msh_sP_o _Msh_sP_V _Msh_sP_i _Msh_sP_P _Msh_sP_PPs || :  # BUG_UNSETFAIL compat
}

# ----------------

# Stack functions.
# Every variable has its own stack: simply do push VAR and pop VAR.
# Also works for saving/restoring shell options, e.g.: push -f; pop -f
# Uses global variable namespace: _Msh__V*__S*
#
# Features:
#	- Saves and restores not just value, but set/unset state.
#	- Stack size is limited by memory or shell constraints only.
#	- Fast: does not launch any subshell or external process.
#	- Cleans up after itself: leaves no trace in the environment upon
#         empty stack.
#
# Use cases:
#	- Easily store lots of arbitary data to use later.
#	- Code blocks (not just functions) with 'fake' local variables.
#	- Easy temporary field splitting ('push IFS' and 'pop IFS' work fine).

# Push each variable's value or shell option setting on its respective stack.
# Usage: push <item> [ <item> ...]
#	where <item> is a variable name or shell option (dash plus letter).
push() {
	# Exporting the stack would be bad; run 'push' without 'set -a' active.
	# Save the status of 'set -a' in a variable so 'push -a' works.
	case ${#},$- in
	( 0,* )	_Msh_dieArgs push "$#" 'at least 1' || return ;;
	( *a* )	set +a; _Msh_push_opta=y ;;
	( * )	unset -v _Msh_push_opta ;;
	esac

	# Validate variable names before doing anything. Portable shell varname
	# constraints apply; also disallow internal separators __V and __S.
	_Msh_push_err=0
	for _Msh_push_V do
		case ${_Msh_push_V} in
		( -[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] ) ;;	# short-form shell option: ok (no 'o')
		( '' | [0123456789]* | *[!${ASCIIALNUM}_]* | *__[VS]* )
			die "push: invalid variable name or shell option: ${_Msh_push_V}" || { _Msh_push_err=$?; break; } ;;
		esac
	done

	# Do the job.
	[ "${_Msh_push_err}" -eq 0 ] && for _Msh_push_V do
		# If it's a (short, single) shell option, translate to internal variable.
		case ${_Msh_push_V} in
		( -a )	[ -n "${_Msh_push_opta+s}" ] && _Msh_ShellOpt_a='' || unset -v _Msh_ShellOpt_a
			_Msh_push_V='_Msh_ShellOpt_a'
			;;
		( -? )	_Msh_push_V=${_Msh_push_V#-}
			case $- in
			( *${_Msh_push_V}* )
				eval "_Msh_ShellOpt_${_Msh_push_V}=''" ;;
			( * )
				unset -v "_Msh_ShellOpt_${_Msh_push_V}" ;;
			esac
			_Msh_push_V="_Msh_ShellOpt_${_Msh_push_V}"
			;;
		esac

		# Initialize/validate stack pointer.
		eval "_Msh_push_SP=\${_Msh__V${_Msh_push_V}__SP=0}"
		case ${_Msh_push_SP} in
		( '' | *[!0123456789]* ) die "push: Stack pointer for ${_Msh_push_V} corrupted" || return  ;;
		esac

		# Store value or unset status.
		if eval "[ -n \"\${${_Msh_push_V}+s}\" ]"; then
			eval "_Msh__V${_Msh_push_V}__S${_Msh_push_SP}=\$${_Msh_push_V}"
		else
			unset -v "_Msh__V${_Msh_push_V}__S${_Msh_push_SP}"
		fi

		# Increase stack pointer for next item on stack.
		: $((_Msh__V${_Msh_push_V}__SP = _Msh_push_SP + 1))
	done
	[ -n "${_Msh_push_opta+s}" ] && { set -a; unset -v _Msh_push_opta; }
	eval "unset -v _Msh_push_V _Msh_push_SP _Msh_push_err; return ${_Msh_push_err}"
}

# Pop each variable's last value off the stack and restore it into the
# variable.
#
# Returns unsuccessfully without changing anything if *any* of the stacks
# for the specified variables or shell options is empty. Either all get
# popped, or none. This helps provide validation against stack inconsistency
# for groups of variables that should be pushed/popped together.
#
# Usage: pop <item> [ <item> ...]
#	 where <item> is a variable name or shell option (dash plus letter).
pop() {
	# Exporting the stack would be bad; run 'pop' without 'set -a' active.
	# Save the status of 'set -a' in a variable so 'pop -a' works.
	case ${#},$- in
	( 0,* )	_Msh_dieArgs pop "$#" 'at least 1' || return ;;
	( *a* )	set +a; _Msh_pop_opta=y ;;
	( * )	unset -v _Msh_pop_opta ;;
	esac

	# Validate everything before doing anything.
	_Msh_pop_err=0
	for _Msh_pop_V do
		case ${_Msh_pop_V} in
		( -[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )	# short-form shell option (no 'o')
			_Msh_pop_V="_Msh_ShellOpt_${_Msh_pop_V#-}" ;;
		( '' | [0123456789]* | *[!${ASCIIALNUM}_]* | *__[VS]* )
			die "pop: invalid variable name or shell option: $_Msh_pop_V" || { _Msh_pop_err=$?; break; } ;;
		esac

		if eval "[ -n \"\${_Msh__V${_Msh_pop_V}__SP+s}\" ]"; then
			# validate stack pointer
			eval "_Msh_pop_SP=\${_Msh__V${_Msh_pop_V}__SP}"
			case ${_Msh_pop_SP} in
			( '' | 0* | *[!0123456789]* )
				die "pop: Stack pointer for ${_Msh_pop_V} corrupted" || { _Msh_pop_err=$?; break; } ;;
			esac
		else
			# stack empty
			_Msh_pop_err=1
		fi
	done

	# Do the job.
	[ "${_Msh_pop_err}" -eq 0 ] && for _Msh_pop_V do
		# If shell option, translate to internal variable.
		case ${_Msh_pop_V} in
		( -? )
			_Msh_pop_V="_Msh_ShellOpt_${_Msh_pop_V#-}" ;;
		esac

		# Decrease stack pointer so it points to the item to pop.
		: $(( _Msh_pop_SP = ( _Msh__V${_Msh_pop_V}__SP -= 1 ) ))

		# Restore value or unset status.
		if eval "[ -n \"\${_Msh__V${_Msh_pop_V}__S${_Msh_pop_SP}+s}\" ]"; then
			eval "${_Msh_pop_V}=\$_Msh__V${_Msh_pop_V}__S${_Msh_pop_SP}"
		else
			unset -v "${_Msh_pop_V}"
		fi

		# Clean up: unset the stack variable we just popped off the stack.
		unset -v "_Msh__V${_Msh_pop_V}__S${_Msh_pop_SP}"

		# Clean up: if the stack is empty, unset the stack pointer.
		if [ "${_Msh_pop_SP}" -eq 0 ]; then
			unset -v "_Msh__V${_Msh_pop_V}__SP"
		fi

		# If it's a shell option variable, restore the shell option.
		case ${_Msh_pop_V} in
		( _Msh_ShellOpt_a )
			if [ -n "${_Msh_ShellOpt_a+s}" ]; then
				_Msh_pop_opta=y
				unset -v _Msh_ShellOpt_a
			else
				unset -v _Msh_pop_opta
			fi
			;;
		( _Msh_ShellOpt_[bcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )
			if eval "[ -n \"\${${_Msh_pop_V}+s}\" ]"; then
				set "-${_Msh_pop_V#_Msh_ShellOpt_}"
				unset -v "${_Msh_pop_V}"
			else
				case $- in
				( *${_Msh_pop_V#_Msh_ShellOpt_}* )
					set "+${_Msh_pop_V#_Msh_ShellOpt_}"
					;;
				esac
			fi
			;;
		esac
	done
	[ -n "${_Msh_pop_opta+s}" ] && { set -a; unset -v _Msh_pop_opta; }
	eval "unset -v _Msh_pop_V _Msh_pop_SP _Msh_pop_err; return ${_Msh_pop_err}"
}

# Check if there is anything left on a variable or shell options's stack.
# Returns 0 (true) if the stack is empty, 1 (false) if not.
stackempty() {
	case ${#},${1-} in
	( 1,-[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )
		eval "[ -z \"\${_Msh__V_Msh_ShellOpt_${1#-}__SP+s}\" ]" ;;
	( 1, | 1,[0123456789]* | 1,*[!${ASCIIALNUM}_]* | 1,*__[VS]* )
		die "stackempty: invalid variable name or shell option: $1" ;;
	( 1,* )	eval "[ -z \"\${_Msh__V${1}__SP+s}\" ]" ;;
	( * )	_Msh_dieArgs stackempty "$#" 1 ;;
	esac
}

# Outputs the size of a variable's stack.
stacksize() {
	case ${#},${1-} in
	( 1,-[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )
		eval "printf '%s\n' \${_Msh__V_Msh_ShellOpt_${1#-}__SP:-0}" ;;
	( 1,'' | 1,[0123456789]* | 1,*[!${ASCIIALNUM}_]* | 1,*__[VS]* )
		die "stacksize: invalid variable name or shell option: $1" ;;
	( 1,* )	eval "printf '%s\n' \${_Msh__V${1}__SP:-0}" ;;
	( * )	_Msh_dieArgs stackempty "$#" 1 ;;
	esac
}
	

# Outputs the contents of a variable or shell options's stack, top down, one
# item per line.
# Usage: printstack [ -Q ] <varname/shellopt>
# Option -Q shell-quotes each stack value before printing it. This allows
# parsing of multi-line or otherwise complicated values.
# Column 1 of the output contains S if the value is set, U if unset.
# Column 2 to 7 of the output contain the number of the item (down to 0).
# If the item is set, column 8 and 9 contain a colon and a space, and
# column 10 and up contain the value, or '(unset entry)' if the item is unset.
# TODO: Option for bottom-up output
# TODO: Consider if 6 columns for stack number is enough
printstack() {
	_Msh_printstack_optQ=''
	case "$#" in
	( 1 )	_Msh_printstack_V=$1 ;;
	( 2 )	case $1 in
		( -Q )	_Msh_printstack_optQ=yes ;;
		( -* )	die "printstack: invalid option: $1" || return ;;
		esac
		_Msh_printstack_V=$2 ;;
	( * )	_Msh_dieArgs printstack "$#" '1 or 2 (excl. option -Q)' || return ;;
	esac
	case ${_Msh_printstack_V} in
	( -[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )	# short-form shell option (no 'o')
		_Msh_printstack_V="_Msh_ShellOpt_${_Msh_printstack_V#-}" ;;
	( '' | [0123456789]* | *[!${ASCIIALNUM}_]* | *__[VS]* )
		die "printstack: invalid variable name: $1" || return ;;
	esac

	# Return non-success if stack empty.
	if eval "[ -z \"\${_Msh__V${_Msh_printstack_V}__SP+s}\" ]"; then
		unset -v _Msh_printstack_optQ _Msh_printstack_V
		return 1
	fi

	# Validate stack pointer.
	eval "_Msh_printstack_i=\${_Msh__V${_Msh_printstack_V}__SP}"
	case ${_Msh_printstack_i} in
	( '' | *[!0123456789]* ) die "printstack: Stack pointer for $1 corrupted" || return ;;
	esac

	# Output the stack.
	while [ "$((_Msh_printstack_i-=1))" -ge 0 ]; do
		if eval "[ -n \"\${_Msh__V${_Msh_printstack_V}__S${_Msh_printstack_i}+s}\" ]"; then
			eval "_Msh_printstack_VAL=\${_Msh__V${_Msh_printstack_V}__S${_Msh_printstack_i}}"
			[ -z "${_Msh_printstack_optQ}" ] || shellquote _Msh_printstack_VAL
			printf 'S%6d: %s\n' "${_Msh_printstack_i}" "${_Msh_printstack_VAL}"
		else
			printf 'U%6d\n' "${_Msh_printstack_i}"
		fi
	done

	unset -v _Msh_printstack_i _Msh_printstack_opt _Msh_printstack_optQ _Msh_printstack_V _Msh_printstack_VAL
}

# Empties one or more variables' or shell options' stacks.
# Usage: clearstack <item> [ <item> ... ]
# Empties *nothing* if one of the specified items' stack is already empty.
# This allows extra validation when treating several items as a group.
clearstack() {
	[ "$#" -ge 1 ] || _Msh_dieArgs clearstack "$#" 'at least 1' || return

	# Validate everything before doing anything
	for _Msh_clearstack_V do
		case ${_Msh_clearstack_V} in
		( -[abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] )	# short-form shell option (no 'o')
			_Msh_clearstack_V="_Msh_ShellOpt_${_Msh_clearstack_V#-}" ;;
		( '' | [0123456789]* | *[!${ASCIIALNUM}_]* | *__[VS]* )
			die "clearstack: invalid variable name or shell option: $_Msh_clearstack_V" || return ;;
		esac

		# if the stack for one of the given items is empty, don't clear any of them
		if eval "[ -z \"\${_Msh__V${_Msh_clearstack_V}__SP+s}\" ]"; then
			unset -v _Msh_clearstack_V _Msh_clearstack_SP
			return 1
		fi

                eval "_Msh_clearstack_SP=\${_Msh__V${_Msh_clearstack_V}__SP}"
		case ${_Msh_clearstack_SP} in
		( '' | *[!0123456789]* ) die "clearstack: Stack pointer for ${_Msh_clearstack_V} corrupted" || return ;;
		esac
	done

	# Do the job
	for _Msh_clearstack_V do
		case ${_Msh_clearstack_V} in
		( -? )	_Msh_clearstack_V="_Msh_ShellOpt_${_Msh_clearstack_V#-}" ;;
		esac
		eval "_Msh_clearstack_SP=\${_Msh__V${_Msh_clearstack_V}__SP}"
		while [ "$((_Msh_clearstack_SP-=1))" -ge 0 ]; do
			unset -v "_Msh__V${_Msh_clearstack_V}__S${_Msh_clearstack_SP}"
		done
		unset -v "_Msh__V${_Msh_clearstack_V}__SP"
	done
	unset -v _Msh_clearstack_V _Msh_clearstack_SP
}

# -------------

# Adds a trap to each specified signal's trap stack
# Usage: pushtrap <command> <sigspec> [ <sigspec> ... ]
# TODO: Idea: add 'key' option to protect against popping by others.
pushtrap() {
	[ "$#" -ge 2 ] || _Msh_dieArgs pop "$#" 'at least 2' || return
	_Msh_pushtrapCMD=$1
	shellquote _Msh_pushtrapCMD
	shift
	for _Msh_pushtrap_sig do
		case ${_Msh_pushtrap_sig} in
		( 1 )	_Msh_pushtrap_sig='HUP' ;;
		( 2 )	_Msh_pushtrap_sig='INT' ;;
		( 3 )	_Msh_pushtrap_sig='QUIT' ;;
		( 6 )	_Msh_pushtrap_sig='ABRT' ;;
		( 9 )	_Msh_pushtrap_sig='KILL' ;;
		( 14 )	_Msh_pushtrap_sig='ALRM' ;;
		( 15 )	_Msh_pushtrap_sig='TERM' ;;
		esac
		case ${_Msh_pushtrap_sig#SIG} in
		( '' | [0123456789]* | *[!${ASCIIALNUM}]* )
			die "pushtrap: invalid signal specification: ${_Msh_pushtrap_sig}" || return ;;
		esac
		eval "_Msh_trap${_Msh_pushtrap_sig#SIG}=${_Msh_pushtrapCMD}"
		push "_Msh_trap${_Msh_pushtrap_sig#SIG}"
		command trap "_Msh_doTraps ${_Msh_pushtrap_sig#SIG}" "${_Msh_pushtrap_sig#SIG}" \
			|| die "pushtrap: 'trap' failed" || return
		unset -v "_Msh_trap${_Msh_pushtrap_sig#SIG}"
	done
	unset -v _Msh_pushtrapCMD _Msh_pushtrap_sig
}

# Removes a trap from each signal's trap stack without executing it.
# Clear the signal's master trap if there are no more left on the stack.
# Use: poptrap <sigspec> [ <sigspec> ... ]
poptrap() {
	for _Msh_poptrap_sig do
		_Msh_poptrap_sig=${_Msh_poptrap_sig#SIG}
		case ${_Msh_poptrap_sig} in
		( '' | [0123456789]* | *[!${ASCIIALNUM}]* )
			die "poptrap: invalid signal specification: ${_Msh_poptrap_sig}" || return ;;
		esac
		pop "_Msh_trap${_Msh_poptrap_sig}" || return
		unset -v "_Msh_trap${_Msh_poptrap_sig}"
		if stackempty "_Msh_trap${_Msh_poptrap_sig}"; then
			command trap - "${_Msh_poptrap_sig}"
		fi
	done
	unset -v _Msh_poptrap_sig
}

# Do the traps for a signal. Start from the top of the stack, but don't pop
# the commands, as not all signals lead to termination and some may be
# trapped repeatedly. (Internal function. Subject to change without notice.)
_Msh_doTraps() {
	eval "[ -n \"\${_Msh__V_Msh_trap${1}__SP+s}\" ]" || return
	: $(( _Msh_doTraps_i = _Msh__V_Msh_trap${1}__SP ))
	while [ "$((_Msh_doTraps_i -= 1))" -ge 0 ]; do
		eval "eval \"\${_Msh__V_Msh_trap${1}__S${_Msh_doTraps_i}}\""
	done
	unset -v _Msh_doTraps_i
}

# Alias the builtin 'trap' to a replacement to discourage overwriting other
# traps on the same signal. (Overriding 'trap' with a function doesn't work
# on every shell; an alias is more reliable.)
alias trap='_Msh_newTrap'
# TODO: make a functioning trap command here that will use the trap stack
# non-destructively according to POSIX and/or existing implementations .
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#trap
_Msh_newTrap() {
	die "Use pushtrap and poptrap instead of trap.${CCn}Replacement 'trap' command not yet implemented."
}

# Save the current positional parameters on the stack.
if thisshellhas BUG_UPP; then
	alias pushparams='{ _Msh_doPushParams ${1+"$@"}; }'
else
	alias pushparams='{ _Msh_doPushParams "$@"; }'
fi
_Msh_doPushParams() {
	_Msh_PPs=''
	while [ "$#" -gt 0 ]; do
		_Msh_pushparams_P=$1
		shellquote _Msh_pushparams_P || die "pushparams: 'shellquote' failed" || return
		_Msh_PPs="${_Msh_PPs:+${_Msh_PPs} }${_Msh_pushparams_P}"
		shift
	done
	push _Msh_PPs || die "pushparams: 'push' failed" || return
	unset -v _Msh_PPs _Msh_pushparams_P || :
}

# Restore the last-pushed positional parameters. Returns successfully if
# there were positional parameters to restore, unsuccessfully if not.
alias popparams='{ pop _Msh_PPs && eval "set -- $_Msh_PPs" && unset -v _Msh_PPs; }'

# -------------

# harden: modernish's replacement for 'set -e' (errexit)
#
# Function that installs a function to harden commands by testing their exit
# status against values indicating error or system failure. Upon failure,
# 'harden' calls 'die', so it will reliably halt program execution, even if
# the failure occurred within a subshell (for instance, in a pipe construct
# or command substitution).
#
# Usage: harden [ as <funcname> ] <commandname/path> <testexpr>
# The <testexpr> supports eq, ne, lt, le, gt, ge with 1 argument (0-255).
# Also supported are && and || and parentheses (all space separated).
# Usage examples:
#	harden grep 'gt 1': grep fails on exit status > 1
#	harden grep 'ge 2': equivalent to the above
#	harden gzip 'eq 1 || gt 2': 1 and >2 are errors, but 2 isn't
#
# What exit status indicates failure depends on the command. For standard
# commands, refer to the POSIX standard. For others, see their manual pages.
#
# To harden a shell function, alias, command with full pathname,
# or any command with a name that would be invalid for a shell
# function, you have harden it 'as' a different name.

harden() {
	case ${#},${1-} in
	( [34],as )
		_Msh_harden_func=$2
		_Msh_harden_cmd=$(command -v "$3") || die "harden: command not found: '$3'" || return
		shift 2
		;;
	( [12],* )
		_Msh_harden_func=$1
		_Msh_harden_cmd=$(command -v "$1") || die "harden: command not found: '$1'" || return
		;;
	( * )	die "harden: incorrect arguments${CCn}" \
		"usage: harden [ as <funcname> ] <cmdname/path> [ <testexpr> ]${CCn}" || return
		;;
	esac

	case ${_Msh_harden_func} in
	( '' | [0123456789]* | *[!${ASCIIALNUM}_]* )
		die "harden: invalid shell function name: ${_Msh_harden_func}" || return
		;;
	( 'command' | 'set' | 'return' | 'case' | 'do' | 'done' | 'elif' | 'else' \
	| 'esac' | 'fi' | 'for' | 'if' | 'in' | 'then' | 'until' | 'while' )
		die "harden: can't harden '${_Msh_harden_func}'" || return
		;;
	esac

	case ${_Msh_harden_cmd} in
	( "alias ${_Msh_harden_func}="* )
		die "harden: can't harden an alias as itself: ${_Msh_harden_func}" || return
		;;
	( "${_Msh_harden_func}" )
		thisshellhas "${_Msh_harden_func}" \
		|| die "harden: can't harden a shell function as itself: ${_Msh_harden_func}" || return
		# Got shell built-in command.
		_Msh_harden_cmd="command ${_Msh_harden_func}"
		;;
	( * )	shellquote _Msh_harden_cmd	# in case of weird path names
		;;
	esac

	if thisshellhas BUG_UPP; then
		_Msh_harden_cmd=${_Msh_harden_cmd}' ${1+"$@"}'
	else
		_Msh_harden_cmd=${_Msh_harden_cmd}' "$@"'
	fi

	# Evaluate the status check expression, translating it to shell commands.
	_Msh_harden_arg=${2:-'gt 0'}
	_Msh_harden_expr=''
	_Msh_harden_Plvl=0
	push IFS && IFS=$WHITESPACE && set -- ${_Msh_harden_arg} && pop IFS || die "harden: internal error" || return
	while [ "$#" -gt 0 ]; do
		case $1 in
		( '(' )	_Msh_harden_expr="${_Msh_harden_expr} {"
			_Msh_harden_Plvl=$((_Msh_harden_Plvl+1))
			;;
		( ')' )	_Msh_harden_expr="${_Msh_harden_expr}; }"
			_Msh_harden_Plvl=$((_Msh_harden_Plvl-1))
			;;
		( eq | ne | lt | le | gt | ge )
			[ "$#" -gt 1 ] || die "harden: unexpected end of status expression: ${_Msh_harden_arg}" || return
			( : "$(($2))" ) || die \
				"harden: invalid arithmetic expression '$2' in status expression: ${_Msh_harden_arg}" || return
			_Msh_harden_s=$(($2))
			[ "${_Msh_harden_s}" -ge 0 ] && [ "${_Msh_harden_s}" -le 255 ] \
			&& _Msh_harden_expr="${_Msh_harden_expr} [ \"\$1\" -$1 ${_Msh_harden_s} ]" \
			&& shift
			;;
		( * )	false
			;;
		esac || die "harden: invalid error status expression: ${_Msh_harden_arg}" || return
		shift
		if [ "$#" -gt 0 ]; then
			case $1 in
			( '(' | ')' )
				continue
				;;
			( '&&' | '||' )
				_Msh_harden_expr="${_Msh_harden_expr} $1"
				shift
				[ "$#" -gt 0 ] && [ "$1" != ')' ] || die \
					"harden: unexpected end of status expression: ${_Msh_harden_arg}" || return
				;;
			( '*' )	die "harden: syntax error in status expression: ${_Msh_harden_arg}" || return
				;;
			esac
		fi
	done
	[ "${_Msh_harden_Plvl}" -eq 0 ] || die "harden: unbalanced parentheses: ${_Msh_harden_arg}" || return
	set -- 0
	eval "${_Msh_harden_expr}"
	case $? in
	( 1 ) ;;
	( 0 ) die "harden: success means failure in status expression: ${_Msh_harden_arg}" || return ;;
	( * ) die "harden: invalid error status expression: ${_Msh_harden_arg}" || return ;;
	esac

	# Just to make sure:
	{ unalias 'command' 'set' 'return'; unset -f 'command' 'set' 'return'; } 2>/dev/null

	# Set the hardening function.
	# (As an exception, there is no '|| return' after 'die', because if we're in
	# an interactive shell that can't be killed, we want the command to exit with
	# its own status code, not that of 'die'.)
	eval "${_Msh_harden_func}() {
		${_Msh_harden_cmd} && return
		set -- \"\$?\" ':' ${_Msh_harden_cmd}
		if${_Msh_harden_expr}; then
			shellquoteparams
			die \"${_Msh_harden_func}: command failed with status \$@\"
		fi
		return \"\$1\"
	}"

	unset -v _Msh_harden_cmd _Msh_harden_func _Msh_harden_expr _Msh_harden_Plvl _Msh_harden_s _Msh_harden_arg
}

# -------------

# 'print' and 'echo'
#
# 'print' prints each argument on a separate line (unlike 'echo' which
# prints all arguments on one line). There is no processing of options or
# escape codes. NOTE: this is completely different from ksh/zsh 'print'.
#
# POSIX: "It is not possible to use echo portably across all POSIX systems
# unless both -n (as the first argument) and escape sequences are omitted."
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html#tag_20_37_16
#
# Provide a modernish version of 'echo', so at least all modernish programs can
# safely expect the same behaviour. This version does not interpret any control
# characters and supports only one option, '-n', which, like BSD 'echo',
# suppresses the newline. However, unlike BSD 'echo', if '-n' is the only
# argument, it is not interpreted as an option and the string '-n' is printed
# instead. This makes it safe to output arbitrary data using this version of
# 'echo' as long as it is given as a single argument (using quoting if needed).

if thisshellhas print LOCAL; then
	# pdksh and mksh don't have a 'printf' builtin, and using the external
	# 'printf' command is very slow. But they do have a built-in
	# ksh/zsh-style 'print' command, so here are versions of 'print' and
	# 'echo' that take advantage of it to get much higher performance.
	#
	# (Don't make 'print' itself a function because, on shells where
	# modernish is already loaded and 'print' is already an alias,
	# '. modernish' would throw a syntax error if it's reloaded and would
	# not get a chance to print a graceful error message.)
	alias print='_Msh_doPrint'
	_Msh_doPrint() {
		case $# in
		( 0 )	command print ;;
		( 1 )	command print -r -- "$1" ;;
		( * )	local IFS="$CCn" # separator for "$*"
			command print -r -- "$*" ;;
		esac
	}

	echo() {
		case ${#},${1-} in
		( 0, )   command print ;;
		( 1,* )  command print -r -- "$1" ;;
		( 2,-n ) command print -nr -- "$2" ;;
		( *,-n ) local IFS=' ' # separator for "$*"
			 shift
			 command print -nr -- "$*" ;;
		( * )	 local IFS=' '
			 command print -r -- "$*" ;;
		esac
	}

else
	# For most shells, use 'printf' for print and echo.
	# The print command can be a simple alias.
	alias print='printf %s\\n'

	if thisshellhas LOCAL; then
		echo() {
			case ${#},${1-} in
			( 0, )   printf '\n' ;;
			( 1,* )  printf '%s\n' "$1" ;;
			( 2,-n ) printf '%s' "$2" ;;
			( *,-n ) local IFS=' ' # separator for "$*"
				 shift
				 printf '%s' "$*" ;;
			( * )	 local IFS=' '
				 printf '%s\n' "$*" ;;
			esac
		}
	else
		echo() {
			case ${#},${1-} in
			( 0, )   printf '\n' ;;
			( 1,* )  printf '%s\n' "$1" ;;
			( 2,-n ) printf '%s' "$2" ;;
			( *,-n ) push IFS
				 IFS=' ' # separator for "$*"
				 shift
				 printf '%s' "$*"
				 pop IFS ;;
			( * )	 push IFS
				 IFS=' '
				 printf '%s\n' "$*"
				 pop IFS ;;
			esac
		}
	fi
fi

# -------------

# 'source' as in zsh and bash, with optional positional parameters, now also
# available to (d)ash, yash and *ksh*. If extra arguments are given, they
# are passed to the dot script as local positional parameters as in a shell
# function; if not, the dot script inherits the calling environment's
# positional parameters (unlike a shell function).
#
# In pure POSIX shells, '.' cannot pass extra arguments, and dot scripts
# always inherit the caller's positional parameters; this can be worked
# around with a shell function. However, this is implementation-dependent;
# in bash, *ksh* and zsh, '.' does pass the parameters. Modernish scripts
# should use 'source' instead of '.' for consistent functionality.
#
# Sourcing the script as the last command in the function works around a quirk
# in FreeBSD /bin/sh where 'return' from a dot script called by a function
# returns from the calling function and not just the dot script.
if ! thisshellhas source; then
	if thisshellhas BUG_UPP; then
		alias source='_Msh_doSource "$#" ${1+"$@"}'
	else
		alias source='_Msh_doSource "$#" "$@"'
	fi
	_Msh_doSource() {
		[ "$#" -gt "$(( $1 + 1 ))" ] || _Msh_dieArgs source 0 'at least 1' || return
		eval "_Msh_source_S=\${$(( $1 + 2 ))}"

		if [ "$#" -gt "$(( $1 + 2 ))" ]; then
			# extra arguments were given; discard the number of caller's positional parameters, the
			# caller's positional parameters themselves, and the argument indicating the dot script
			shift "$(( $1 + 2 ))"
		else
			# no extra arguments were given; keep caller's positional parameters, but remove the number
			# of them (first parameter) and the argument indicating the dot script (last parameter)
			if [ "$1" -gt 0 ]; then
				_Msh_doStoreParams "$#" "$@" -f 2 -t "$(( $1 + 1 ))" _Msh_source_params
				eval "set -- ${_Msh_source_params}"
				unset -v _Msh_source_params
			else
				set --
			fi
		fi

		# Unlike '.', find the dot script in the current directory, not just in $PATH.
		case ${_Msh_source_S} in
		( */* )	;;
		( * )	if [ -f "./${_Msh_source_S}" ]; then
				_Msh_source_S=./${_Msh_source_S}
			fi ;;
		esac
			
		shellquote _Msh_source_S
		eval "unset -v _Msh_source_S; . ${_Msh_source_S}"
	}
fi

# -------------

# Implementation of 'let' as in ksh, bash, zsh and busybox ash, for shells
# without it.
# Usage: let <expr> [ <expr> ... ]
# where <expr> is an arithmetic expression as in $(( ... )).
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_04
#
# The exit status is 1 if the last expression evaluates to 0, and 0 if not.
# (0 and 1 in C-style boolean are the opposite of 0 and 1 in shell boolean, so
# this means it does the right true-or-false thing for the shell.)
#
# NOTE: the prefix and postfix "++" and "--" operators are NOT required by
# POSIX and not portable. The ID 'ARITHPP' is assigned to this feature, so
# if you want to use ++/-- you should first check if "thisshellhas ARITHPP".
# Otherwise, for example, instead of 'let X++', use 'let X+=1'.
#
# Shells immediately exit on arith evaluation error, so the usual "|| die"
# check on errors is ineffective.
#
# There are two portability problems with 'let' builtins:
#   1.	On AT&T ksh, the first expression cannot start with a '-' as it will
#	be interpreted as an option, even though its "let" doesn't have any
#	valid options. The end-of-options delimeter '--' is needed for the
#	first expression to start with '-'. However, on pdksh/mksh and
#	Busybox ash, '--' is not accepted and will throw a syntax error.
#	These situations are irreconcilable without a workaround.
#	(Bash and zsh accept '--' but don't require them, even if the first
#	expression starts with '-'.)
#   2.  Some ash derivatives (such as FreeBSD /bin/sh) have an undocumented
#	and incompatible 'let' builtin that only takes one expression (and
#	uselessly outputs the result to standard output).
# So let's test if we have a version that works as expected and override the
# builtin if it's not up to scratch.
unset -v _Msh_X _Msh_Y _Msh_goodlet
if thisshellhas let; then
	if let -1\<0 _Msh_X=1 _Msh_Y=_Msh_X+3 \
	&& [ "${_Msh_X-}" = 1 ] \
	&& [ "${_Msh_Y-}" = 4 ] \
	&& unset -v _Msh_X _Msh_Y
	then
		# Use the builtin as is: bash, zsh, pdksh, mksh, Busybox ash
		_Msh_goodlet=y
	elif let -- -1\<0 _Msh_X=1 _Msh_Y=_Msh_X+3 \
	&& [ "${_Msh_X-}" = 1 ] \
	&& [ "${_Msh_Y-}" = 4 ] \
	&& unset -v _Msh_X _Msh_Y
	then
		# Workaround for AT&T ksh to make things like 'let -1==var' or 'let --var' work.
		alias let='let --'
		_Msh_goodlet=y
	fi
fi 2>/dev/null
if [ -n "${_Msh_goodlet+s}" ]; then
	unset -v _Msh_goodlet
else
	# We're on a shell with a missing or incompatible 'let' builtin, so provide our own.
	# Speed-optimize it by processing up to 8 expressions at once. (Quoting the parameters
	# to the : no-op command also slightly speeds it up, because field splitting and
	# pathname expansion are not performed.) This modernish version, like pdksh/mksh and
	# Busybox ash, does not accept the '--' end-of-options delimiter.
	let() {
		case $# in
		( 1 )	return "$((!($1)))" ;;
		( 2 )	: "$(($1))"
			return "$((!($2)))" ;;
		( 3 )	: "$(($1))$(($2))"
			return "$((!($3)))" ;;
		( 4 )	: "$(($1))$(($2))$(($3))"
			return "$((!($4)))" ;;
		( 5 )	: "$(($1))$(($2))$(($3))$(($4))"
			return "$((!($5)))" ;;
		( 6 )	: "$(($1))$(($2))$(($3))$(($4))$(($5))"
			return "$((!($6)))" ;;
		( 7 )	: "$(($1))$(($2))$(($3))$(($4))$(($5))$(($6))"
			return "$((!($7)))" ;;
		( 8 )	: "$(($1))$(($2))$(($3))$(($4))$(($5))$(($6))$(($7))"
			return "$((!($8)))" ;;
		( 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 )
			: "$(($1))$(($2))$(($3))$(($4))$(($5))$(($6))$(($7))$(($8))"
			shift 8
			let "$@" ;;
		( 0 )	die "let: expression expected" || return ;;
		( * )	while let "$# > 8"; do
				: "$(($1))$(($2))$(($3))$(($4))$(($5))$(($6))$(($7))$(($8))"
				shift 8
			done
			let "$@" ;;
		esac
	}
fi

# -------------

# Simple integer arith shortcuts.
# Usage: inc/dec/mult/div/mod <varname> [ <expr> ]
# Increase/decrease/multiply/divide/modulus the value of the variable by the
# result of the integer arithmetic expression <expr>. Default for <expr> is
# 1 for 'inc' and 'dec', 2 for 'mult' and 'div', 256 for 'mod'.
# TODO: figure out sensible default for 'mod'.
# 
# The arith operator itself does sufficient validation, though error messages
# are not always very clear. Shells exit on error, so the usual "|| die" is
# ineffective.
inc()  { : "$((${1?inc: needs 1 or 2 arguments}+=(${2-1})${3+\\$CCn[ inc: excess arguments ]}))"; }
dec()  { : "$((${1?dec: needs 1 or 2 arguments}-=(${2-1})${3+\\$CCn[ dec: excess arguments ]}))"; }
mult() { : "$((${1?mult: needs 1 or 2 arguments}*=(${2-2})${3+\\$CCn[ mult: excess arguments ]}))"; }
div()  { : "$((${1?div: needs 1 or 2 arguments}/=(${2-2})${3+\\$CCn[ div: excess arguments ]}))"; }
mod()  { : "$((${1?mod: needs 1 or 2 arguments}%=(${2-256})${3+\\$CCn[ mod: excess arguments ]}))"; }

# ndiv is like div, but always returns the integer on or before
# $((varname / expr)), even for negative numbers. Standard shell
# arith just chops off the digits after the decimal point, which
# is not ok for negative. (The idea is from wide_strftime.sh by
# Stéphane Chazelas: http://stchaz.free.fr)
ndiv() { : "$((_Msh_ndiv=(${2-2})))" \
"$((${1?ndiv: needs 1 or 2 arguments} = \
(($1/_Msh_ndiv)*_Msh_ndiv > $1) ? $1/_Msh_ndiv-1 : $1/_Msh_ndiv \
${3+\\$CCn[ ndiv: excess arguments ]} ))"
}

# -------------

# Safer replacement functions for 'test'/'[', which is hereby deprecated
# for legibility and security reasons.
#
# TODO: writeup re 'test' security, e.g. variable injection "-o 1 -eq 1";
# generally too many syntax ambiguity pitfalls) Ref.:
# http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html

# --- Integer number arithmetic tests. ---

# These have the sames name as their 'test'/'[' option equivalents. Unlike
# with 'test', the arguments are shell integer arith expressions, which can
# be anything from simple numbers to complex expressions. As with $(( )),
# variable names are expanded to their values even without the '$'.
#
# Portability note: bash, ksh and zsh do recursive evaluation of variable
# names (where a variable can contain the name of another variable, and so
# forth), but that is non-standard and unportable.
#
# Function:		Returns succcessfully if:
# --------		------------------------
# eq <expr> <expr>	the two expressions evaluate to the same number
# ne <expr> <expr>	the two expressions evaluate to different numbers
# lt <expr> <expr>	the 1st expr evaluates to a smaller number than the 2nd
# le <expr> <expr>	the 1st expr eval's to smaller than or equal to the 2nd
# gt <expr> <expr>	the 1st expr evaluates to a greater number than the 2nd
# ge <expr> <expr>	the 1st expr eval's to greater than or equal to the 2nd
#
# Example:
# if eq 2+2 4; then echo 'freedom granted; all else follows'; fi
#
# The arith operator itself does sufficient validation on all shells, though
# error messages are not always very clear.
#
# As a performance hack, the functions below abuse this arith validation in
# combination with parameter substitution to check for excess arguments, by
# injecting a guaranteed-to-be-invalid value (starting with an escaped '\') in
# case of excess arguments. According to my tests, this is completely reliable
# in every shell, and causes no noticable performance reduction. Not only
# that, many shells (not zsh or yash) helpfully insert the invalid value into
# its own error message, so we can add our own message ('excess arguments') to
# be passed on.
#
# Shells exit on arith evaluation errors, so the usual "|| die" is ineffective
# and we can't terminate the program properly from a subshell. I have made the
# choice that the performance gain is worth it in this instance.
#
# Note: the inversion of comparison operators is NOT a bug! POSIX arith is
# based on the C language, so uses 1 for true and 0 for false, whereas the
# shell language itself does the inverse. The fastest way to invert the result
# code is to invert the operators.
#
eq() { return "$(((${1?eq: needs 2 arguments})!=(${2?eq: needs 2 arguments})${3+\\[ eq: excess arguments ]}))"; }
ne() { return "$(((${1?ne: needs 2 arguments})==(${2?ne: needs 2 arguments})${3+\\[ ne: excess arguments ]}))"; }
lt() { return "$(((${1?lt: needs 2 arguments})>=(${2?lt: needs 2 arguments})${3+\\[ lt: excess arguments ]}))"; }
le() { return "$(((${1?le: needs 2 arguments})>(${2?le: needs 2 arguments})${3+\\[ le: excess arguments ]}))"; }
gt() { return "$(((${1?gt: needs 2 arguments})<=(${2?gt: needs 2 arguments})${3+\\[ gt: excess arguments ]}))"; }
ge() { return "$(((${1?ge: needs 2 arguments})<(${2?ge: needs 2 arguments})${3+\\[ ge: excess arguments ]}))"; }

# Test if the given argument is an integer number.
# Leading and trailing space and tab characters are ignored
# (because they are ignored in test/[ and shell arith as well).
# TODO: flag for allowing octal and hexadecimal representations.
# TODO: optimize
isint() {
	[ "$#" -eq 1 ] || _Msh_dieArgs isint "$#" 1 || return
	_Msh_isint_V=${1#"${1%%[! $CCt]*}"}
	_Msh_isint_V=${_Msh_isint_V%"${_Msh_isint_V##*[! $CCt]}"}
	case ${_Msh_isint_V} in
	( 0x?* | [-+]0x?* )
		case ${_Msh_isint_V#*0x} in
		( *[!0123456789abcdefABCDEF]* )
			return 1 ;;
		esac
		;;
	( 0?* | [-+]0?* )
		case ${_Msh_isint_V} in
		( *[!01234567+-]* | ?*[-+]* )
			return 1 ;;
		esac
		;;
	( '' | [-+] | *[!0123456789+-]* | ?*[-+]* )
		return 1 ;;
	esac
	unset -v _Msh_isint_V
}

# ---- String tests. ----
# (Negative string tests are not provided; just put 'not' or '!' before them)

# Test for the empty string. Usage: empty <value>
#	Unlike "test -z", this function deals correctly with the POSIX
#	shell's non-optional removal of unquoted empty arguments: it accepts
#	zero arguments as equivalent to empty. That means, if you 'use safe',
#	you can do 'if empty $var' without having to quote $var, provided
#	field splitting or globbing are not turned on.
#	The function treats more than one argument as a fatal error, because
#	that is a sign of unexpected field splitting or globbing.
empty() {
	case ${#},${1-} in
	( [01], ) ;;
	( 1,* ) return 1 ;;
	( * ) _Msh_dieArgs empty "$#" '0 or 1' ;;
	esac
}

# Test for identical strings. Usage: identic <value1> <value2>
#	This function deals correctly with the POSIX shell's non-optional
#	removal of unquoted empty arguments: it accepts zero arguments as
#	equivalent to "identical" (i.e. two removed empties) and one
#	argument as "not identical" (one removed empty, one non-empty).
#	That means, if you 'use safe', you can do 'if identic $var1 $var2'
#	without having to quote $var1 and $var2, provided field splitting or
#	globbing are not turned on.
#	The function treats more than two arguments as a fatal error,
#	because that is a sign of unexpected field splitting or globbing.
identic() {
	case ${#},${1-} in
	( 0, | 2,"${2-}" ) ;;
	( [12],* ) return 1 ;;
	( * ) _Msh_dieArgs identic "$#" 'max. 2' ;;
	esac
}

# For lexical comparison, unfortunately [ '<' and '>' ] are not POSIX, but
# the standards-compliant way requires the external 'expr' utility. So let's
# see what this particular shell supports and fall back on 'expr', making
# sure that it works even if the arguments contain newline characters.
#
#	(Unfortunately, dealing with empty removal as in identic() above is
#	impossible, because if there is only one removed empty argument,
#	then you cannot tell whether it was the first or second argument, so
#	it's impossible to tell how it sorts. So if there is the possibility
#	of empty variables, they must always be quoted, even under 'use
#	safe'.)
#
# ...	If we're running on bash, ksh or zsh:
if PATH=/dev/null; eval "[[ 'a${CCn}b' < 'a${CCn}bb' && 'a${CCn}bb' > 'a${CCn}b' ]]"
then
	PATH=${_Msh_PATH}
	sortsbefore() {
		case $# in
		( 2 )	[[ $1 < $2 ]] ;;
		( * )	_Msh_dieArgs sortsbefore "$#" 2 ;;
		esac
	}
	sortsafter() {
		case $# in
		( 2 )	[[ $1 > $2 ]] ;;
		( * )	_Msh_dieArgs sortsafter "$#" 2 ;;
		esac
	}
# ...	Try to fall back to builtin '['/'test' non-standard feature.
#	Thankfully, '<' and '>' are pretty widely supported for this
#	builtin. Unlike with [[ ]], we need to quote everything.
elif PATH=/dev/null; eval "[ 'a${CCn}b' '<' 'a${CCn}bb' ] && [ 'a${CCn}bb' '>' 'a${CCn}b' ]"
then
	PATH=${_Msh_PATH}
	sortsbefore() {
		case $# in
		( 2 )	[ "X$1" '<' "X$2" ] || { [ "$?" -gt 1 ] && die "sortsbefore: '[' failed"; } ;;
		( * )	_Msh_dieArgs sortsbefore "$#" 2 ;;
		esac
	}
	sortsafter() {
		case $# in
		( 2 )	[ "X$1" '>' "X$2" ] || { [ "$?" -gt 1 ] && die "sortsafter: '[' failed"; } ;;
		( * )	_Msh_dieArgs sortsafter "$#" 2 ;;
		esac
	}

# ...	Fall back to the POSIX way with 'expr'. The test is paranoid
#	to check that the utility is the one we expect.
elif PATH=${_Msh_PATH}; eval "expr 1 = 1 && ! expr 1 = 2 \
	&& expr 'a${CCn}b' '<' 'a${CCn}bb' \
	&& expr 'a${CCn}bb' '>' 'a${CCn}b'"
then
	sortsbefore() {
		case $# in
		( 2 )	expr "X$1" '<' "X$2" >/dev/null || { [ "$?" -gt 1 ] && die "sortsbefore: 'expr' failed"; } ;;
		( * )	_Msh_dieArgs sortsbefore "$#" 2 ;;
		esac
	}
	sortsafter() {
		case $# in
		( 2 )	expr "X$1" '>' "X$2" >/dev/null || { [ "$?" -gt 1 ] && die "sortsafter: 'expr' failed"; } ;;
		( * )	_Msh_dieArgs sortsafter "$#" 2 ;;
		esac
	}
else
	printf '%s\n' "Can't run modernish: no valid 'expr' command available." 1>&3
	test -e "$HOME/.modernish-force" || exit 127
	printf "Proceeding anwyay. 'sortsbefore' and 'sortsafter' won't work." 1>&3
fi 3>&2 >/dev/null 2>&1

# String comparison tests:
# Usage: <contains|startswith|endswith> <string> <string>
contains() {
	case ${#},${1-} in
	( 2,*"${2-}"* ) ;;
	( 2,* )	return 1 ;;
	( * )	_Msh_dieArgs contains "$#" 2 ;;
	esac
}
startswith() {
	case ${#},${1-} in
	( 2,"${2-}"* ) ;;
	( 2,* ) return 1 ;;
	( * )	_Msh_dieArgs startswith "$#" 2 ;;
	esac
}
endswith() {
	case ${#},${1-} in
	( 2,*"${2-}" ) ;;
	( 2,* )	return 1 ;;
	( * )	_Msh_dieArgs endswith "$#" 2 ;;
	esac
}

# Glob pattern or extended regex test:
# Usage: match <string> <glob-pattern>
#	 match -E <string> <extended-regex>
#
# Unfortunately, many shells (zsh, ash, *ksh, ...) don't properly support
# passing a glob pattern with escaped characters from a variable. Escaping
# behaviour with glob patterns in variables varies wildly from shell to
# shell. Bash and dash follow the standard, but too many don't. To ensure
# portability, we must ban the \ from the glob pattern, and accept that
# escaping glob characters to match a literal '*', '?' or '[' using this
# function is impossible.
#
# For extended regular expressions, use the [[ keyword if available and
# if it supports extended regular expressions. This is much faster than
# the standard method which involves invoking the external grep command.
#
# When matching single characters, beware of BUG_MULTIBYTE!
#
# TODO:	Work around inconsistencies with match -E and (a) empty regex
#	or (b) multi-line regex. Some shells' "[[" and "grep -E" act
#	differently from each other.
#
if ( PATH=/dev/null; eval "[[ xyz =~ ^[a-z]+$ ]]" ); then
	# Wrap the function definition in 'eval', otherwise shells that
	# have '[[' but don't support '=~' fail to parse the script.
	eval 'match() {
		case ${#},${1-},${2-} in
		( 2,"${1-}",*\\* )
			die "match: Backslash-escaping is not supported in glob patterns." ;;
		( 2,${2-},"${2-}" )
			;;
		( 2,* )	return 1 ;;
		( 3,-E,* )
			[[ $2 =~ $3 ]] ;;
		( 3,* )	die "match: invalid arguments" ;;
		( * )	_Msh_dieArgs match "$#" "2 or 3" ;;
		esac
	}'
elif [ xyz '=~' '^[a-z]+$' ]; then
	# yash supports extended regex matching in builtin test/[.
	match() {
		case ${#},${1-},${2-} in
		( 2,"${1-}",*\\* )
			die "match: Backslash-escaping is not supported in glob patterns." ;;
		( 2,${2-},"${2-}" )
			;;
		( 2,* )	return 1 ;;
		( 3,-E,* )
			[ "$2" '=~' "$3" ] ;;
		( 3,* )	die "match: invalid arguments" ;;
		( * )	_Msh_dieArgs match "$#" "2 or 3" ;;
		esac
	}
else
	match() {
		case ${#},${1-},${2-} in
		( 2,"${1-}",*\\* )
			die "match: Backslash-escaping is not supported in glob patterns." ;;
		( 2,${2-},"${2-}" )
			;;
		( 2,* )	return 1 ;;
		( 3,-E,* )
			printf '%s\n' "$2" | command grep -qE "$3" || { [ "$?" -gt 1 ] && die "match: 'grep' failed"; } ;;
		( 3,* )	die "match: invalid arguments" ;;
		( * )	_Msh_dieArgs match "$#" "2 or 3" ;;
		esac
	}
fi 2>/dev/null

# --- General file tests. ---

# exists "$file": tests if file exists.
# exists -L "$file": tests if file exists and is not an invalid symlink.
# (This is written to cope correctly with a file with the literal name '-L',
# without the need to add '--', even though -L is also an option.)
exists() {
	case ${#},${1-},${2-} in
	( 1,, | 2,-L, )	die "exists: empty string argument" || return ;;
	( 1,*, )	[ -e "$1" ] || { [ "$?" -le 1 ] || die "exists: '[' failed" || return; [ -L "$1" ]; } ;;
	( 2,-L,* )	[ -e "$2" ] ;;
	( 2,-* )	die "exists: invalid option: $1" || return ;;
	( 2,* )		die "exists: only one non-option argument allowed" || return ;;
	( * )		_Msh_dieArgs exists "$#" '1 or 2' || return ;;
	esac || { [ "$?" -gt 1 ] && die "exists: '[' failed"; }
}

# Test if file exists, is not an invalid symlink, and is non-empty. Unlike
# 'test -s', this also works for directories in which you have read
# permission. A race condition with tests like this is inevitable (even
# with the traditional 'test -s'). Be careful with parallel processing!
# Exit status:
# 0: file or directory (after resolving any symlinks) is not empty
# 1: file or directory is empty, doesn't exist, or is an invalid symlink
# 2: no read permission in directory, so cannot test if directory is empty
# The directory testing method was kindly provided by Stéphane Chazelas in:
# Message-ID: <20150524190928.GB6744@chaz.gmail.com>
# https://groups.google.com/forum/#!original/comp.unix.shell/M_gDU9uk8Rk/FyiS9m-RFYAJ
isnonempty() {
	case ${#},${1-} in
	( 1, )	die "isnonempty: empty string argument" || return ;;
	( 1,* )	if [ -d "$1" ]; then
			[ -r "$1" ] || return 2
			case $- in
			( *f* ) set +f; set -- "$1" "$1"/[*] "$1"/* "$1"/.[!.]* "$1"/.??*; set -f ;;
			( * )	set -- "$1" "$1"/[*] "$1"/* "$1"/.[!.]* "$1"/.??* ;;
			esac
			[ "${#} $2 $3 $4 $5" != "5 $1/[*] $1/* $1/.[!.]* $1/.??*" ]
		else
			_Msh_fileTest isnonempty s -L "$@"
		fi ;;
        ( * )	_Msh_dieArgs isnonempty "$#" 1 || return ;;
	esac
}

# --- File permission tests. ---
# Note: These automatically resolve symlinks.

# Test if this program can read, write or execute a file.
alias canread='_Msh_fileTest canread r -L'
alias canwrite='_Msh_fileTest canwrite w -L'
alias canexec='_Msh_fileTest canexec x -L'
	
# Test if file has user or group ID bits set.
alias issetuid='_Msh_fileTest issetuid u -L'
alias issetgid='_Msh_fileTest issetgid g -L'

# Test if file is owned by user or by current user's main group.
# (Note: the -O and -G test/[ operators are technically non-standard, but
# their support in shells that can run the rest of modernish is universal.)
alias ismine='_Msh_fileTest ismine O -L'
alias ismygroup='_Msh_fileTest ismygroup G -L'

# --- File type tests. ---

# Test if file is a symlink.
alias issymlink='_Msh_fileTest issymlink L -L'

# Note: The following tests do *not* resolve symlinks unless the -L option is
# used. This is to promote security and discourage allowing symlink attacks.

alias isreg='_Msh_fileTest isreg f'
alias isdir='_Msh_fileTest isdir d'
alias isfifo='_Msh_fileTest isfifo p'
alias issocket='_Msh_fileTest issocket S'
alias isblockspecial='_Msh_fileTest isblockspecial b'
alias ischarspecial='_Msh_fileTest ischarspecial c'

# Internal function. Not for direct use.
# (It is written to cope correctly with a file with the literal name '-L',
# without the need to add '--', even though -L is also an option.)
# TODO: cope with empty removal
_Msh_fileTest() {
	case ${#},${3-},${4-} in
	( 3,, | 4,-L, )	die "$1: empty string argument" || return ;;
	( 3,*, )	[ ! -L "$3" ] && [ "-$2" "$3" ] ;;
	( 4,-L,* )	[ "-$2" "$4" ] ;;
	( 4,-* )	die "$1: invalid option: $3" || return ;;
	( 4,* )		die "$1: only one non-option argument allowed" || return ;;
	( * )		_Msh_dieArgs "$1" "$((${#}-2))" '1 or 2' || return ;;	# BUG_HASHVAR workaround: '${#}'
	esac || { [ "$?" -gt 1 ] && die "$1: '[' failed"; }
}

# Test if file descriptor is open and associated with a terminal.
# (Note: POSIX specifies that file descriptors can be 0 to minimum 19,
# but most shells only support file descriptors between 0 and 9.)
if thisshellhas BUG_TESTILNUM; then
	# On dash, BUG_TESTILNUM causes test/[ to be misparsed once after
	# [ -t "$1" ] is called with an invalid number. As a workaround,
	# we need a dummy invocation of [ to restore correct parsing.
	isonterminal() {
		case ${#},${1-} in
		( 1,*[!0123456789]* )
			die "isonterminal: invalid file descriptor: $1" ;;
		( 1,* )	[ -t "$1" ]
			case $? in
			( 0 )	;;
			( 1 )	return 1 ;;
			( * )	[ 2 -gt 1 ] 2>/dev/null	# BUG_TESTILNUM workaround
				die "isonterminal: '[' failed" ;;
			esac ;;
		( * )	_Msh_dieArgs isonterminal "$#" 1 ;;
		esac
	}
else
	isonterminal() {
		case ${#},${1-} in
		( 1,*[!0123456789]* )
			die "isonterminal: invalid file descriptor: $1" ;;
		( 1,* )	[ -t "$1" ] || { [ "$?" -gt 1 ] && die "isonterminal: '[' failed"; } ;;
		( * )	_Msh_dieArgs isonterminal "$#" 1 ;;
		esac
	}
fi

# --- Two-argument file tests. ---
# (Note: the -nt, -ot and -ef test/[ operators are technically non-standard,
# but all shells that can run the rest of modernish support these.)

# Test if file 1 is newer than file 2.
isnewerthan() {
	case $# in
	( 2 )	[ "$1" -nt "$2" ] || { [ "$?" -gt 1 ] && die "isnewerthan: '[' failed"; } ;;
	( * )	_Msh_dieArgs isnewerthan "$#" 2 ;;
	esac
}

# Test if file 1 is older than file 2.
isolderthan() {
	case $# in
	( 2 )	[ "$1" -ot "$2" ] || { [ "$?" -gt 1 ] && die "isolderthan: '[' failed"; } ;;
	( * )	_Msh_dieArgs isolderthan "$#" 2 ;;
	esac
}

# Test if file 1 and file 2 are the same file (i.e. are hard links).
issamefileas() {
	case $# in
	( 2 )	[ "$1" -ef "$2" ] || { [ "$?" -gt 1 ] && die "issamefileas: '[' failed"; } ;;
	( * )	_Msh_dieArgs issamefileas "$#" 2 ;;
	esac
}

# -------------------

# Initialization, phase 2.

unset -v _Msh_PATH

# Temporary identity.
if endswith "$0" '/modernish'; then
	ME=$0
else
	ME=$(command -v modernish) || _Msh_doExit 127 "modernish: can't find myself; please add my dir to PATH"
fi

# Find the directory of modernish modules
_Msh_ModulesDir=${ME%/*/*}/libexec/modernish
test -d "${_Msh_ModulesDir}" || _Msh_doExit 127 "modules directory not found"
readonly _Msh_ModulesDir

# Restore 'allexport' option if it was set
if isset _Msh_allexport; then
	set -a
	unset -v _Msh_allexport
fi

# --------------------
# ------- MAIN -------
# --------------------

# Find out how modernish was invoked and launch the invoking program if necessary.
if ! endswith "$0" '/modernish'; then
	# modernish was sourced
	case $- in
	( *i* )	unexport "ME=modernish on ${0#-}"
		printf "Welcome to the modernish age (version %s).\n" "$MSH_VERSION"
		if ! empty "$MSH_CAP"; then
			printf 'This shell has: %s\n' "$MSH_CAP"
		fi
		pushtrap 'printf "\nExiting modernish %s. Bye.\n" "$MSH_VERSION"' EXIT
		;;
	( * )	unexport "ME=$0"
		;;
	esac
	readonly ME
elif gt "$#" 0; then
	# modernish *is* the shell (e.g. '#!/usr/bin/env modernish'):
	# parse standard shell options.
	# TODO: make more consistent with other shells' option parsing.
	while match "${1:-}" '[-+]*'; do
		case $1 in
		( -c )
			ge "$#" 2 || _Msh_doExit 2 "option requires argument: -c"
			_Msh_cmd=$2
			shift 2
			eval "${_Msh_cmd}"
			exit
			;;
		( -i | -l )
			_Msh_doExit 2 "To use modernish interactively, source it ('. modernish') in your shell profile."
			;;
		( [-+]o )
			ge "$#" 2 || _Msh_doExit 2 "option requires argument: -o"
			command set "$1" "$2" || _Msh_doExit "$?" "'set $1 $2' failed"
			shift
			;;
		( [-+]* )
			command set "$1" || _Msh_doExit "$?" "'set $1' failed"
			;;
		( --version )
			printf '%s\n' "$MSH_VERSION"
			exit
			;;
		( -- )
			shift
			break
			;;
		( * )
			_Msh_doExit 2 "invalid option: $1"
			;;
		esac
		shift
	done
	unexport "ME=$1"
	readonly ME
	shift
	# We don't want '.' to search in $PATH instead of the current
	# directory; make sure it loads the file specified from the current
	# directory if no directory path was specified. (This is consistent
	# with other shells except bash, which searches both in the current
	# directory and in $PATH.)
	case $ME in
	( */* )	. "$ME" ;;
	( * )	. "./$ME" ;;
	esac
else
	_Msh_doExit 2 "To use modernish interactively, source it ('. modernish') in your shell profile."
fi
