#! /usr/bin/env modernish
#! use safe -w BUG_APPENDC
#! use var/setlocal -w BUG_FNSUBSH

harden -p printf

# some old systems come without 'nl'
PATH=$DEFPATH command nl </dev/null 2>/dev/null
if not so; then
	nl() (
		num=0
		while read -r line; do
			printf '%6d\t%s\n' $((num+=1)) "$line"
		done
	)
else
	harden -p nl
fi

putln '-----Test 1-----'
putln 'Globbing off:'
put *
setlocal --doglob
	putln '' 'Globbing on:'
	put *
	return 2
endlocal
putln '' "(Exit status of local block should be 2, was $?)"
putln 'Globbing off again:'
put *

putln '' '' '-----Test 2------'
X=12 Y=13
putln "     Global1:${CCt}X=$X${CCt}Y=$Y"
setlocal X=2 Y=4 splitthis='this string should not be subject to fieldsplitting.'
	putln "      Local1:${CCt}X=$X${CCt}Y=$Y"
	setlocal X=hi Y=there --dosplit splitthis='look ma, i can do local fieldsplitting!'
		putln "NestedLocal1:${CCt}X=$X${CCt}Y=$Y"
		X=13 Y=37
		putln "NestedLocal2:${CCt}X=$X${CCt}Y=$Y"
		putln $splitthis | nl
	endlocal
	putln "      Local2:${CCt}X=$X${CCt}Y=$Y"
	X=123 Y=456
	putln "      Local3:${CCt}X=$X${CCt}Y=$Y"
	putln $splitthis | nl
endlocal
putln "     Global2:${CCt}X=$X${CCt}Y=$Y"

# BUG_FNSUBSH:
# Running setlocal in a subshell makes ksh93 execute the WRONG temporary
# function (in this case, the 'NestedLocal' one above). So, running setlocal
# in a subshell (incl. a command substitution) does not work on ksh93. The
# var/setlocal module blocks on BUG_FNSUBSH unless the -w (workaround)
# option is given, which declares the program will work around this bug
# (by not using setlocal in subshells).
putln '' '------Test 3------'
if thisshellhas BUG_FNSUBSH; then
	putln '(If you see "NestedLocal1:" below, then BUG_FNSUBSH causes the shell to execute the wrong temp function!)'
else
	putln '(If you see anything other than the files in your PWD below, there is an undiscovered bug!)'
fi
result=$(setlocal --nosplit --doglob; printf '[%s] ' * | fold -s; endlocal)
putln $result

# ksh93 has LEPIPEMAIN (last element of pipe is executed in main shell), so
# piping into setlocal should be fine in spite of BUG_FNSUBSH.
putln '' '------Test 3a------'
putln one two three four | setlocal X --split=$CCn; while read X; do put "[$X] "; done; echo; endlocal

putln '' '------Test 4------' 'This test should fail with: "stack corrupted (failed to pop globals)".'
setlocal testvar=$CCv'stack corruption test test...'$CCn
	putln $testvar
	pop testvar
endlocal
putln 'Bad! We should never get here.'
